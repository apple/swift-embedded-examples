// Generated by svd2swift.

import MMIO

/// LCD-TFT Controller
@RegisterBlock
struct LTDC {
    /// Synchronization Size Configuration Register
    @RegisterBlock(offset: 0x8)
    var sscr: Register<SSCR>

    /// Back Porch Configuration Register
    @RegisterBlock(offset: 0xc)
    var bpcr: Register<BPCR>

    /// Active Width Configuration Register
    @RegisterBlock(offset: 0x10)
    var awcr: Register<AWCR>

    /// Total Width Configuration Register
    @RegisterBlock(offset: 0x14)
    var twcr: Register<TWCR>

    /// Global Control Register
    @RegisterBlock(offset: 0x18)
    var gcr: Register<GCR>

    /// Shadow Reload Configuration Register
    @RegisterBlock(offset: 0x24)
    var srcr: Register<SRCR>

    /// Background Color Configuration Register
    @RegisterBlock(offset: 0x2c)
    var bccr: Register<BCCR>

    /// Interrupt Enable Register
    @RegisterBlock(offset: 0x34)
    var ier: Register<IER>

    /// Interrupt Status Register
    @RegisterBlock(offset: 0x38)
    var isr: Register<ISR>

    /// Interrupt Clear Register
    @RegisterBlock(offset: 0x3c)
    var icr: Register<ICR>

    /// Line Interrupt Position Configuration Register
    @RegisterBlock(offset: 0x40)
    var lipcr: Register<LIPCR>

    /// Current Position Status Register
    @RegisterBlock(offset: 0x44)
    var cpsr: Register<CPSR>

    /// Current Display Status Register
    @RegisterBlock(offset: 0x48)
    var cdsr: Register<CDSR>

    /// Cluster LAYER%s, containing L?CR, L?WHPCR, L?WVPCR, L?CKCR, L?PFCR, L?CACR, L?DCCR, L?BFCR, L?CFBAR, L?CFBLR, L?CFBLNR, L?CLUTWR
    @RegisterBlock(offset: 0x84, stride: 0x80, count: 2)
    var layer: RegisterArray<LAYER>
}

extension LTDC {
    /// Synchronization Size Configuration Register
    @Register(bitWidth: 32)
    struct SSCR {
        /// Horizontal Synchronization Width (in units of pixel clock period)
        @ReadWrite(bits: 16..<28)
        var hsw: HSW

        /// Vertical Synchronization Height (in units of horizontal scan line)
        @ReadWrite(bits: 0..<11)
        var vsh: VSH
    }

    /// Back Porch Configuration Register
    @Register(bitWidth: 32)
    struct BPCR {
        /// Accumulated Horizontal back porch (in units of pixel clock period)
        @ReadWrite(bits: 16..<28)
        var ahbp: AHBP

        /// Accumulated Vertical back porch (in units of horizontal scan line)
        @ReadWrite(bits: 0..<11)
        var avbp: AVBP
    }

    /// Active Width Configuration Register
    @Register(bitWidth: 32)
    struct AWCR {
        /// Accumulated Active Width (in units of pixel clock period)
        @ReadWrite(bits: 16..<28)
        var aaw: AAW

        /// Accumulated Active Height (in units of horizontal scan line)
        @ReadWrite(bits: 0..<11)
        var aah: AAH
    }

    /// Total Width Configuration Register
    @Register(bitWidth: 32)
    struct TWCR {
        /// Total Width (in units of pixel clock period)
        @ReadWrite(bits: 16..<28)
        var totalw: TOTALW

        /// Total Height (in units of horizontal scan line)
        @ReadWrite(bits: 0..<11)
        var totalh: TOTALH
    }

    /// Global Control Register
    @Register(bitWidth: 32)
    struct GCR {
        /// Horizontal Synchronization Polarity
        @ReadWrite(bits: 31..<32, as: HSPOLValues.self)
        var hspol: HSPOL

        /// Vertical Synchronization Polarity
        @ReadWrite(bits: 30..<31, as: VSPOLValues.self)
        var vspol: VSPOL

        /// Data Enable Polarity
        @ReadWrite(bits: 29..<30, as: DEPOLValues.self)
        var depol: DEPOL

        /// Pixel Clock Polarity
        @ReadWrite(bits: 28..<29, as: PCPOLValues.self)
        var pcpol: PCPOL

        /// Dither Enable
        @ReadWrite(bits: 16..<17, as: DENValues.self)
        var den: DEN

        /// Dither Red Width
        @ReadOnly(bits: 12..<15)
        var drw: DRW

        /// Dither Green Width
        @ReadOnly(bits: 8..<11)
        var dgw: DGW

        /// Dither Blue Width
        @ReadOnly(bits: 4..<7)
        var dbw: DBW

        /// LCD-TFT controller enable bit
        @ReadWrite(bits: 0..<1, as: LTDCENValues.self)
        var ltdcen: LTDCEN
    }

    /// Shadow Reload Configuration Register
    @Register(bitWidth: 32)
    struct SRCR {
        /// Vertical Blanking Reload
        @ReadWrite(bits: 1..<2, as: VBRValues.self)
        var vbr: VBR

        /// Immediate Reload
        @ReadWrite(bits: 0..<1, as: IMRValues.self)
        var imr: IMR
    }

    /// Background Color Configuration Register
    @Register(bitWidth: 32)
    struct BCCR {
        /// Background color blue value
        @ReadWrite(bits: 0..<8)
        var bcblue: BCBLUE

        /// Background color green value
        @ReadWrite(bits: 8..<16)
        var bcgreen: BCGREEN

        /// Background color red value
        @ReadWrite(bits: 16..<24)
        var bcred: BCRED
    }

    /// Interrupt Enable Register
    @Register(bitWidth: 32)
    struct IER {
        /// Register Reload interrupt enable
        @ReadWrite(bits: 3..<4, as: RRIEValues.self)
        var rrie: RRIE

        /// Transfer Error Interrupt Enable
        @ReadWrite(bits: 2..<3, as: TERRIEValues.self)
        var terrie: TERRIE

        /// FIFO Underrun Interrupt Enable
        @ReadWrite(bits: 1..<2, as: FUIEValues.self)
        var fuie: FUIE

        /// Line Interrupt Enable
        @ReadWrite(bits: 0..<1, as: LIEValues.self)
        var lie: LIE
    }

    /// Interrupt Status Register
    @Register(bitWidth: 32)
    struct ISR {
        /// Register Reload Interrupt Flag
        @ReadOnly(bits: 3..<4)
        var rrif: RRIF

        /// Transfer Error interrupt flag
        @ReadOnly(bits: 2..<3)
        var terrif: TERRIF

        /// FIFO Underrun Interrupt flag
        @ReadOnly(bits: 1..<2)
        var fuif: FUIF

        /// Line Interrupt flag
        @ReadOnly(bits: 0..<1)
        var lif: LIF
    }

    /// Interrupt Clear Register
    @Register(bitWidth: 32)
    struct ICR {
        /// Clears Register Reload Interrupt Flag
        @WriteOnly(bits: 3..<4)
        var crrif: CRRIF

        /// Clears the Transfer Error Interrupt Flag
        @WriteOnly(bits: 2..<3)
        var cterrif: CTERRIF

        /// Clears the FIFO Underrun Interrupt flag
        @WriteOnly(bits: 1..<2)
        var cfuif: CFUIF

        /// Clears the Line Interrupt Flag
        @WriteOnly(bits: 0..<1)
        var clif: CLIF
    }

    /// Line Interrupt Position Configuration Register
    @Register(bitWidth: 32)
    struct LIPCR {
        /// Line Interrupt Position
        @ReadWrite(bits: 0..<11)
        var lipos: LIPOS
    }

    /// Current Position Status Register
    @Register(bitWidth: 32)
    struct CPSR {
        /// Current X Position
        @ReadOnly(bits: 16..<32)
        var cxpos: CXPOS

        /// Current Y Position
        @ReadOnly(bits: 0..<16)
        var cypos: CYPOS
    }

    /// Current Display Status Register
    @Register(bitWidth: 32)
    struct CDSR {
        /// Horizontal Synchronization display Status
        @ReadOnly(bits: 3..<4)
        var hsyncs: HSYNCS

        /// Vertical Synchronization display Status
        @ReadOnly(bits: 2..<3)
        var vsyncs: VSYNCS

        /// Horizontal Data Enable display Status
        @ReadOnly(bits: 1..<2)
        var hdes: HDES

        /// Vertical Data Enable display Status
        @ReadOnly(bits: 0..<1)
        var vdes: VDES
    }

    /// Cluster LAYER%s, containing L?CR, L?WHPCR, L?WVPCR, L?CKCR, L?PFCR, L?CACR, L?DCCR, L?BFCR, L?CFBAR, L?CFBLR, L?CFBLNR, L?CLUTWR
    @RegisterBlock
    struct LAYER {
        /// Layerx Control Register
        @RegisterBlock(offset: 0x0)
        var cr: Register<CR>

        /// Layerx Window Horizontal Position Configuration Register
        @RegisterBlock(offset: 0x4)
        var whpcr: Register<WHPCR>

        /// Layerx Window Vertical Position Configuration Register
        @RegisterBlock(offset: 0x8)
        var wvpcr: Register<WVPCR>

        /// Layerx Color Keying Configuration Register
        @RegisterBlock(offset: 0xc)
        var ckcr: Register<CKCR>

        /// Layerx Pixel Format Configuration Register
        @RegisterBlock(offset: 0x10)
        var pfcr: Register<PFCR>

        /// Layerx Constant Alpha Configuration Register
        @RegisterBlock(offset: 0x14)
        var cacr: Register<CACR>

        /// Layerx Default Color Configuration Register
        @RegisterBlock(offset: 0x18)
        var dccr: Register<DCCR>

        /// Layerx Blending Factors Configuration Register
        @RegisterBlock(offset: 0x1c)
        var bfcr: Register<BFCR>

        /// Layerx Color Frame Buffer Address Register
        @RegisterBlock(offset: 0x28)
        var cfbar: Register<CFBAR>

        /// Layerx Color Frame Buffer Length Register
        @RegisterBlock(offset: 0x2c)
        var cfblr: Register<CFBLR>

        /// Layerx ColorFrame Buffer Line Number Register
        @RegisterBlock(offset: 0x30)
        var cfblnr: Register<CFBLNR>

        /// Layerx CLUT Write Register
        @RegisterBlock(offset: 0x40)
        var clutwr: Register<CLUTWR>
    }
}

extension LTDC.LAYER {
    /// Layerx Control Register
    @Register(bitWidth: 32)
    struct CR {
        /// Color Look-Up Table Enable
        @ReadWrite(bits: 4..<5, as: CLUTENValues.self)
        var cluten: CLUTEN

        /// Color Keying Enable
        @ReadWrite(bits: 1..<2, as: COLKENValues.self)
        var colken: COLKEN

        /// Layer Enable
        @ReadWrite(bits: 0..<1, as: LENValues.self)
        var len: LEN
    }

    /// Layerx Window Horizontal Position Configuration Register
    @Register(bitWidth: 32)
    struct WHPCR {
        /// Window Horizontal Stop Position
        @ReadWrite(bits: 16..<28)
        var whsppos: WHSPPOS

        /// Window Horizontal Start Position
        @ReadWrite(bits: 0..<12)
        var whstpos: WHSTPOS
    }

    /// Layerx Window Vertical Position Configuration Register
    @Register(bitWidth: 32)
    struct WVPCR {
        /// Window Vertical Stop Position
        @ReadWrite(bits: 16..<27)
        var wvsppos: WVSPPOS

        /// Window Vertical Start Position
        @ReadWrite(bits: 0..<11)
        var wvstpos: WVSTPOS
    }

    /// Layerx Color Keying Configuration Register
    @Register(bitWidth: 32)
    struct CKCR {
        /// Color Key Red value
        @ReadWrite(bits: 16..<24)
        var ckred: CKRED

        /// Color Key Green value
        @ReadWrite(bits: 8..<16)
        var ckgreen: CKGREEN

        /// Color Key Blue value
        @ReadWrite(bits: 0..<8)
        var ckblue: CKBLUE
    }

    /// Layerx Pixel Format Configuration Register
    @Register(bitWidth: 32)
    struct PFCR {
        /// Pixel Format
        @ReadWrite(bits: 0..<3, as: PFValues.self)
        var pf: PF
    }

    /// Layerx Constant Alpha Configuration Register
    @Register(bitWidth: 32)
    struct CACR {
        /// Constant Alpha
        @ReadWrite(bits: 0..<8)
        var consta: CONSTA
    }

    /// Layerx Default Color Configuration Register
    @Register(bitWidth: 32)
    struct DCCR {
        /// Default Color Alpha
        @ReadWrite(bits: 24..<32)
        var dcalpha: DCALPHA

        /// Default Color Red
        @ReadWrite(bits: 16..<24)
        var dcred: DCRED

        /// Default Color Green
        @ReadWrite(bits: 8..<16)
        var dcgreen: DCGREEN

        /// Default Color Blue
        @ReadWrite(bits: 0..<8)
        var dcblue: DCBLUE
    }

    /// Layerx Blending Factors Configuration Register
    @Register(bitWidth: 32)
    struct BFCR {
        /// Blending Factor 1
        @ReadWrite(bits: 8..<11, as: BF1Values.self)
        var bf1: BF1

        /// Blending Factor 2
        @ReadWrite(bits: 0..<3, as: BF2Values.self)
        var bf2: BF2
    }

    /// Layerx Color Frame Buffer Address Register
    @Register(bitWidth: 32)
    struct CFBAR {
        /// Color Frame Buffer Start Address
        @ReadWrite(bits: 0..<32)
        var cfbadd: CFBADD
    }

    /// Layerx Color Frame Buffer Length Register
    @Register(bitWidth: 32)
    struct CFBLR {
        /// Color Frame Buffer Pitch in bytes
        @ReadWrite(bits: 16..<29)
        var cfbp: CFBP

        /// Color Frame Buffer Line Length
        @ReadWrite(bits: 0..<13)
        var cfbll: CFBLL
    }

    /// Layerx ColorFrame Buffer Line Number Register
    @Register(bitWidth: 32)
    struct CFBLNR {
        /// Frame Buffer Line Number
        @ReadWrite(bits: 0..<11)
        var cfblnbr: CFBLNBR
    }

    /// Layerx CLUT Write Register
    @Register(bitWidth: 32)
    struct CLUTWR {
        /// CLUT Address
        @WriteOnly(bits: 24..<32)
        var clutadd: CLUTADD

        /// Red value
        @WriteOnly(bits: 16..<24)
        var red: RED

        /// Green value
        @WriteOnly(bits: 8..<16)
        var green: GREEN

        /// Blue value
        @WriteOnly(bits: 0..<8)
        var blue: BLUE
    }
}

extension LTDC.GCR {
    struct HSPOLValues: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        /// Horizontal synchronization polarity is active low
        static let ActiveLow = Self(rawValue: 0x0)

        /// Horizontal synchronization polarity is active high
        static let ActiveHigh = Self(rawValue: 0x1)

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension LTDC.GCR {
    struct VSPOLValues: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        /// Vertical synchronization polarity is active low
        static let ActiveLow = Self(rawValue: 0x0)

        /// Vertical synchronization polarity is active high
        static let ActiveHigh = Self(rawValue: 0x1)

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension LTDC.GCR {
    struct DEPOLValues: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        /// Data enable polarity is active low
        static let ActiveLow = Self(rawValue: 0x0)

        /// Data enable polarity is active high
        static let ActiveHigh = Self(rawValue: 0x1)

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension LTDC.GCR {
    struct PCPOLValues: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        /// Pixel clock on rising edge
        static let RisingEdge = Self(rawValue: 0x0)

        /// Pixel clock on falling edge
        static let FallingEdge = Self(rawValue: 0x1)

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension LTDC.GCR {
    struct DENValues: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        /// Dither disabled
        static let Disabled = Self(rawValue: 0x0)

        /// Dither enabled
        static let Enabled = Self(rawValue: 0x1)

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension LTDC.GCR {
    struct LTDCENValues: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        /// LCD-TFT controller disabled
        static let Disabled = Self(rawValue: 0x0)

        /// LCD-TFT controller enabled
        static let Enabled = Self(rawValue: 0x1)

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension LTDC.SRCR {
    struct VBRValues: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        /// This bit is set by software and cleared only by hardware after reload (it cannot be cleared through register write once it is set)
        static let NoEffect = Self(rawValue: 0x0)

        /// The shadow registers are reloaded during the vertical blanking period (at the beginning of the first line after the active display area).
        static let Reload = Self(rawValue: 0x1)

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension LTDC.SRCR {
    struct IMRValues: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        /// This bit is set by software and cleared only by hardware after reload (it cannot be cleared through register write once it is set)
        static let NoEffect = Self(rawValue: 0x0)

        /// The shadow registers are reloaded immediately. This bit is set by software and cleared only by hardware after reload
        static let Reload = Self(rawValue: 0x1)

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension LTDC.IER {
    struct RRIEValues: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        /// Register reload interrupt disabled
        static let Disabled = Self(rawValue: 0x0)

        /// Register reload interrupt enabled
        static let Enabled = Self(rawValue: 0x1)

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension LTDC.IER {
    struct TERRIEValues: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        /// Transfer error interrupt disabled
        static let Disabled = Self(rawValue: 0x0)

        /// Transfer error interrupt enabled
        static let Enabled = Self(rawValue: 0x1)

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension LTDC.IER {
    struct FUIEValues: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        /// FIFO underrun interrupt disabled
        static let Disabled = Self(rawValue: 0x0)

        /// FIFO underrun interrupt enabled
        static let Enabled = Self(rawValue: 0x1)

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension LTDC.IER {
    struct LIEValues: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        /// Line interrupt disabled
        static let Disabled = Self(rawValue: 0x0)

        /// Line interrupt enabled
        static let Enabled = Self(rawValue: 0x1)

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension LTDC.LAYER.CR {
    struct CLUTENValues: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        /// Color look-up table disabled
        static let Disabled = Self(rawValue: 0x0)

        /// Color look-up table enabled
        static let Enabled = Self(rawValue: 0x1)

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension LTDC.LAYER.CR {
    struct COLKENValues: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        /// Color keying disabled
        static let Disabled = Self(rawValue: 0x0)

        /// Color keying enabled
        static let Enabled = Self(rawValue: 0x1)

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension LTDC.LAYER.CR {
    struct LENValues: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        /// Layer disabled
        static let Disabled = Self(rawValue: 0x0)

        /// Layer enabled
        static let Enabled = Self(rawValue: 0x1)

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension LTDC.LAYER.PFCR {
    struct PFValues: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 3

        /// ARGB8888
        static let ARGB8888 = Self(rawValue: 0x0)

        /// RGB888
        static let RGB888 = Self(rawValue: 0x1)

        /// RGB565
        static let RGB565 = Self(rawValue: 0x2)

        /// ARGB1555
        static let ARGB1555 = Self(rawValue: 0x3)

        /// ARGB4444
        static let ARGB4444 = Self(rawValue: 0x4)

        /// L8 (8-bit luminance)
        static let L8 = Self(rawValue: 0x5)

        /// AL44 (4-bit alpha, 4-bit luminance)
        static let AL44 = Self(rawValue: 0x6)

        /// AL88 (8-bit alpha, 8-bit luminance)
        static let AL88 = Self(rawValue: 0x7)

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension LTDC.LAYER.BFCR {
    struct BF1Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 3

        /// BF1 = constant alpha
        static let Constant = Self(rawValue: 0x4)

        /// BF1 = pixel alpha * constant alpha
        static let Pixel = Self(rawValue: 0x6)

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension LTDC.LAYER.BFCR {
    struct BF2Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 3

        /// BF2 = 1 - constant alpha
        static let Constant = Self(rawValue: 0x5)

        /// BF2 = 1 - pixel alpha * constant alpha
        static let Pixel = Self(rawValue: 0x7)

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}
