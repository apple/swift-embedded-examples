// Generated by svd2swift.

import MMIO

/// General-purpose I/Os
@RegisterBlock
struct GPIOA {
    /// GPIO port mode register
    @RegisterBlock(offset: 0x0)
    var moder: Register<MODER>

    /// GPIO port output type register
    @RegisterBlock(offset: 0x4)
    var otyper: Register<OTYPER>

    /// GPIO port output speed register
    @RegisterBlock(offset: 0x8)
    var ospeedr: Register<OSPEEDR>

    /// GPIO port pull-up/pull-down register
    @RegisterBlock(offset: 0xc)
    var pupdr: Register<PUPDR>

    /// GPIO port input data register
    @RegisterBlock(offset: 0x10)
    var idr: Register<IDR>

    /// GPIO port output data register
    @RegisterBlock(offset: 0x14)
    var odr: Register<ODR>

    /// GPIO port bit set/reset register
    @RegisterBlock(offset: 0x18)
    var bsrr: Register<BSRR>

    /// GPIO port configuration lock register
    @RegisterBlock(offset: 0x1c)
    var lckr: Register<LCKR>

    /// GPIO alternate function low register
    @RegisterBlock(offset: 0x20)
    var afrl: Register<AFRL>

    /// GPIO alternate function high register
    @RegisterBlock(offset: 0x24)
    var afrh: Register<AFRH>

    /// GPIO port bit reset register
    @RegisterBlock(offset: 0x28)
    var brr: Register<BRR>
}

extension GPIOA {
    /// GPIO port mode register
    @Register(bitWidth: 32)
    struct MODER {
        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 30..<32, as: MODER15Values.self)
        var moder15: MODER15

        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 28..<30, as: MODER14Values.self)
        var moder14: MODER14

        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 26..<28, as: MODER13Values.self)
        var moder13: MODER13

        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 24..<26, as: MODER12Values.self)
        var moder12: MODER12

        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 22..<24, as: MODER11Values.self)
        var moder11: MODER11

        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 20..<22, as: MODER10Values.self)
        var moder10: MODER10

        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 18..<20, as: MODER9Values.self)
        var moder9: MODER9

        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 16..<18, as: MODER8Values.self)
        var moder8: MODER8

        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 14..<16, as: MODER7Values.self)
        var moder7: MODER7

        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 12..<14, as: MODER6Values.self)
        var moder6: MODER6

        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 10..<12, as: MODER5Values.self)
        var moder5: MODER5

        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 8..<10, as: MODER4Values.self)
        var moder4: MODER4

        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 6..<8, as: MODER3Values.self)
        var moder3: MODER3

        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 4..<6, as: MODER2Values.self)
        var moder2: MODER2

        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 2..<4, as: MODER1Values.self)
        var moder1: MODER1

        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 0..<2, as: MODER0Values.self)
        var moder0: MODER0
    }

    /// GPIO port output type register
    @Register(bitWidth: 32)
    struct OTYPER {
        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 15..<16, as: OT15Values.self)
        var ot15: OT15

        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 14..<15, as: OT14Values.self)
        var ot14: OT14

        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 13..<14, as: OT13Values.self)
        var ot13: OT13

        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 12..<13, as: OT12Values.self)
        var ot12: OT12

        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 11..<12, as: OT11Values.self)
        var ot11: OT11

        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 10..<11, as: OT10Values.self)
        var ot10: OT10

        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 9..<10, as: OT9Values.self)
        var ot9: OT9

        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 8..<9, as: OT8Values.self)
        var ot8: OT8

        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 7..<8, as: OT7Values.self)
        var ot7: OT7

        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 6..<7, as: OT6Values.self)
        var ot6: OT6

        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 5..<6, as: OT5Values.self)
        var ot5: OT5

        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 4..<5, as: OT4Values.self)
        var ot4: OT4

        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 3..<4, as: OT3Values.self)
        var ot3: OT3

        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 2..<3, as: OT2Values.self)
        var ot2: OT2

        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 1..<2, as: OT1Values.self)
        var ot1: OT1

        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 0..<1, as: OT0Values.self)
        var ot0: OT0
    }

    /// GPIO port output speed register
    @Register(bitWidth: 32)
    struct OSPEEDR {
        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 30..<32, as: OSPEEDR15Values.self)
        var ospeedr15: OSPEEDR15

        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 28..<30, as: OSPEEDR14Values.self)
        var ospeedr14: OSPEEDR14

        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 26..<28, as: OSPEEDR13Values.self)
        var ospeedr13: OSPEEDR13

        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 24..<26, as: OSPEEDR12Values.self)
        var ospeedr12: OSPEEDR12

        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 22..<24, as: OSPEEDR11Values.self)
        var ospeedr11: OSPEEDR11

        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 20..<22, as: OSPEEDR10Values.self)
        var ospeedr10: OSPEEDR10

        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 18..<20, as: OSPEEDR9Values.self)
        var ospeedr9: OSPEEDR9

        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 16..<18, as: OSPEEDR8Values.self)
        var ospeedr8: OSPEEDR8

        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 14..<16, as: OSPEEDR7Values.self)
        var ospeedr7: OSPEEDR7

        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 12..<14, as: OSPEEDR6Values.self)
        var ospeedr6: OSPEEDR6

        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 10..<12, as: OSPEEDR5Values.self)
        var ospeedr5: OSPEEDR5

        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 8..<10, as: OSPEEDR4Values.self)
        var ospeedr4: OSPEEDR4

        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 6..<8, as: OSPEEDR3Values.self)
        var ospeedr3: OSPEEDR3

        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 4..<6, as: OSPEEDR2Values.self)
        var ospeedr2: OSPEEDR2

        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 2..<4, as: OSPEEDR1Values.self)
        var ospeedr1: OSPEEDR1

        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 0..<2, as: OSPEEDR0Values.self)
        var ospeedr0: OSPEEDR0
    }

    /// GPIO port pull-up/pull-down register
    @Register(bitWidth: 32)
    struct PUPDR {
        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 30..<32, as: PUPDR15Values.self)
        var pupdr15: PUPDR15

        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 28..<30, as: PUPDR14Values.self)
        var pupdr14: PUPDR14

        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 26..<28, as: PUPDR13Values.self)
        var pupdr13: PUPDR13

        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 24..<26, as: PUPDR12Values.self)
        var pupdr12: PUPDR12

        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 22..<24, as: PUPDR11Values.self)
        var pupdr11: PUPDR11

        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 20..<22, as: PUPDR10Values.self)
        var pupdr10: PUPDR10

        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 18..<20, as: PUPDR9Values.self)
        var pupdr9: PUPDR9

        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 16..<18, as: PUPDR8Values.self)
        var pupdr8: PUPDR8

        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 14..<16, as: PUPDR7Values.self)
        var pupdr7: PUPDR7

        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 12..<14, as: PUPDR6Values.self)
        var pupdr6: PUPDR6

        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 10..<12, as: PUPDR5Values.self)
        var pupdr5: PUPDR5

        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 8..<10, as: PUPDR4Values.self)
        var pupdr4: PUPDR4

        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 6..<8, as: PUPDR3Values.self)
        var pupdr3: PUPDR3

        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 4..<6, as: PUPDR2Values.self)
        var pupdr2: PUPDR2

        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 2..<4, as: PUPDR1Values.self)
        var pupdr1: PUPDR1

        /// Port x configuration bits (y = 0..15)
        @ReadWrite(bits: 0..<2, as: PUPDR0Values.self)
        var pupdr0: PUPDR0
    }

    /// GPIO port input data register
    @Register(bitWidth: 32)
    struct IDR {
        /// Port input data (y = 0..15)
        @ReadOnly(bits: 15..<16, as: IDR15Values.self)
        var idr15: IDR15

        /// Port input data (y = 0..15)
        @ReadOnly(bits: 14..<15, as: IDR14Values.self)
        var idr14: IDR14

        /// Port input data (y = 0..15)
        @ReadOnly(bits: 13..<14, as: IDR13Values.self)
        var idr13: IDR13

        /// Port input data (y = 0..15)
        @ReadOnly(bits: 12..<13, as: IDR12Values.self)
        var idr12: IDR12

        /// Port input data (y = 0..15)
        @ReadOnly(bits: 11..<12, as: IDR11Values.self)
        var idr11: IDR11

        /// Port input data (y = 0..15)
        @ReadOnly(bits: 10..<11, as: IDR10Values.self)
        var idr10: IDR10

        /// Port input data (y = 0..15)
        @ReadOnly(bits: 9..<10, as: IDR9Values.self)
        var idr9: IDR9

        /// Port input data (y = 0..15)
        @ReadOnly(bits: 8..<9, as: IDR8Values.self)
        var idr8: IDR8

        /// Port input data (y = 0..15)
        @ReadOnly(bits: 7..<8, as: IDR7Values.self)
        var idr7: IDR7

        /// Port input data (y = 0..15)
        @ReadOnly(bits: 6..<7, as: IDR6Values.self)
        var idr6: IDR6

        /// Port input data (y = 0..15)
        @ReadOnly(bits: 5..<6, as: IDR5Values.self)
        var idr5: IDR5

        /// Port input data (y = 0..15)
        @ReadOnly(bits: 4..<5, as: IDR4Values.self)
        var idr4: IDR4

        /// Port input data (y = 0..15)
        @ReadOnly(bits: 3..<4, as: IDR3Values.self)
        var idr3: IDR3

        /// Port input data (y = 0..15)
        @ReadOnly(bits: 2..<3, as: IDR2Values.self)
        var idr2: IDR2

        /// Port input data (y = 0..15)
        @ReadOnly(bits: 1..<2, as: IDR1Values.self)
        var idr1: IDR1

        /// Port input data (y = 0..15)
        @ReadOnly(bits: 0..<1)
        var idr0: IDR0
    }

    /// GPIO port output data register
    @Register(bitWidth: 32)
    struct ODR {
        /// Port output data (y = 0..15)
        @ReadWrite(bits: 15..<16, as: ODR15Values.self)
        var odr15: ODR15

        /// Port output data (y = 0..15)
        @ReadWrite(bits: 14..<15, as: ODR14Values.self)
        var odr14: ODR14

        /// Port output data (y = 0..15)
        @ReadWrite(bits: 13..<14, as: ODR13Values.self)
        var odr13: ODR13

        /// Port output data (y = 0..15)
        @ReadWrite(bits: 12..<13, as: ODR12Values.self)
        var odr12: ODR12

        /// Port output data (y = 0..15)
        @ReadWrite(bits: 11..<12, as: ODR11Values.self)
        var odr11: ODR11

        /// Port output data (y = 0..15)
        @ReadWrite(bits: 10..<11, as: ODR10Values.self)
        var odr10: ODR10

        /// Port output data (y = 0..15)
        @ReadWrite(bits: 9..<10, as: ODR9Values.self)
        var odr9: ODR9

        /// Port output data (y = 0..15)
        @ReadWrite(bits: 8..<9, as: ODR8Values.self)
        var odr8: ODR8

        /// Port output data (y = 0..15)
        @ReadWrite(bits: 7..<8, as: ODR7Values.self)
        var odr7: ODR7

        /// Port output data (y = 0..15)
        @ReadWrite(bits: 6..<7, as: ODR6Values.self)
        var odr6: ODR6

        /// Port output data (y = 0..15)
        @ReadWrite(bits: 5..<6, as: ODR5Values.self)
        var odr5: ODR5

        /// Port output data (y = 0..15)
        @ReadWrite(bits: 4..<5, as: ODR4Values.self)
        var odr4: ODR4

        /// Port output data (y = 0..15)
        @ReadWrite(bits: 3..<4, as: ODR3Values.self)
        var odr3: ODR3

        /// Port output data (y = 0..15)
        @ReadWrite(bits: 2..<3, as: ODR2Values.self)
        var odr2: ODR2

        /// Port output data (y = 0..15)
        @ReadWrite(bits: 1..<2, as: ODR1Values.self)
        var odr1: ODR1

        /// Port output data (y = 0..15)
        @ReadWrite(bits: 0..<1, as: ODR0Values.self)
        var odr0: ODR0
    }

    /// GPIO port bit set/reset register
    @Register(bitWidth: 32)
    struct BSRR {
        /// Port x reset bit y (y = 0..15)
        @WriteOnly(bits: 31..<32, as: BR15Values.self)
        var br15: BR15

        /// Port x reset bit y (y = 0..15)
        @WriteOnly(bits: 30..<31, as: BR14Values.self)
        var br14: BR14

        /// Port x reset bit y (y = 0..15)
        @WriteOnly(bits: 29..<30, as: BR13Values.self)
        var br13: BR13

        /// Port x reset bit y (y = 0..15)
        @WriteOnly(bits: 28..<29, as: BR12Values.self)
        var br12: BR12

        /// Port x reset bit y (y = 0..15)
        @WriteOnly(bits: 27..<28, as: BR11Values.self)
        var br11: BR11

        /// Port x reset bit y (y = 0..15)
        @WriteOnly(bits: 26..<27, as: BR10Values.self)
        var br10: BR10

        /// Port x reset bit y (y = 0..15)
        @WriteOnly(bits: 25..<26, as: BR9Values.self)
        var br9: BR9

        /// Port x reset bit y (y = 0..15)
        @WriteOnly(bits: 24..<25, as: BR8Values.self)
        var br8: BR8

        /// Port x reset bit y (y = 0..15)
        @WriteOnly(bits: 23..<24, as: BR7Values.self)
        var br7: BR7

        /// Port x reset bit y (y = 0..15)
        @WriteOnly(bits: 22..<23, as: BR6Values.self)
        var br6: BR6

        /// Port x reset bit y (y = 0..15)
        @WriteOnly(bits: 21..<22, as: BR5Values.self)
        var br5: BR5

        /// Port x reset bit y (y = 0..15)
        @WriteOnly(bits: 20..<21, as: BR4Values.self)
        var br4: BR4

        /// Port x reset bit y (y = 0..15)
        @WriteOnly(bits: 19..<20, as: BR3Values.self)
        var br3: BR3

        /// Port x reset bit y (y = 0..15)
        @WriteOnly(bits: 18..<19, as: BR2Values.self)
        var br2: BR2

        /// Port x reset bit y (y = 0..15)
        @WriteOnly(bits: 17..<18, as: BR1Values.self)
        var br1: BR1

        /// Port x set bit y (y= 0..15)
        @WriteOnly(bits: 16..<17)
        var br0: BR0

        /// Port x set bit y (y= 0..15)
        @WriteOnly(bits: 15..<16, as: BS15Values.self)
        var bs15: BS15

        /// Port x set bit y (y= 0..15)
        @WriteOnly(bits: 14..<15, as: BS14Values.self)
        var bs14: BS14

        /// Port x set bit y (y= 0..15)
        @WriteOnly(bits: 13..<14, as: BS13Values.self)
        var bs13: BS13

        /// Port x set bit y (y= 0..15)
        @WriteOnly(bits: 12..<13, as: BS12Values.self)
        var bs12: BS12

        /// Port x set bit y (y= 0..15)
        @WriteOnly(bits: 11..<12, as: BS11Values.self)
        var bs11: BS11

        /// Port x set bit y (y= 0..15)
        @WriteOnly(bits: 10..<11, as: BS10Values.self)
        var bs10: BS10

        /// Port x set bit y (y= 0..15)
        @WriteOnly(bits: 9..<10, as: BS9Values.self)
        var bs9: BS9

        /// Port x set bit y (y= 0..15)
        @WriteOnly(bits: 8..<9, as: BS8Values.self)
        var bs8: BS8

        /// Port x set bit y (y= 0..15)
        @WriteOnly(bits: 7..<8, as: BS7Values.self)
        var bs7: BS7

        /// Port x set bit y (y= 0..15)
        @WriteOnly(bits: 6..<7, as: BS6Values.self)
        var bs6: BS6

        /// Port x set bit y (y= 0..15)
        @WriteOnly(bits: 5..<6, as: BS5Values.self)
        var bs5: BS5

        /// Port x set bit y (y= 0..15)
        @WriteOnly(bits: 4..<5, as: BS4Values.self)
        var bs4: BS4

        /// Port x set bit y (y= 0..15)
        @WriteOnly(bits: 3..<4, as: BS3Values.self)
        var bs3: BS3

        /// Port x set bit y (y= 0..15)
        @WriteOnly(bits: 2..<3, as: BS2Values.self)
        var bs2: BS2

        /// Port x set bit y (y= 0..15)
        @WriteOnly(bits: 1..<2, as: BS1Values.self)
        var bs1: BS1

        /// Port x set bit y (y= 0..15)
        @WriteOnly(bits: 0..<1)
        var bs0: BS0
    }

    /// GPIO port configuration lock register
    @Register(bitWidth: 32)
    struct LCKR {
        /// Port x lock bit y (y= 0..15)
        @ReadWrite(bits: 16..<17, as: LCKKValues.self)
        var lckk: LCKK

        /// Port x lock bit y (y= 0..15)
        @ReadWrite(bits: 15..<16, as: LCK15Values.self)
        var lck15: LCK15

        /// Port x lock bit y (y= 0..15)
        @ReadWrite(bits: 14..<15, as: LCK14Values.self)
        var lck14: LCK14

        /// Port x lock bit y (y= 0..15)
        @ReadWrite(bits: 13..<14, as: LCK13Values.self)
        var lck13: LCK13

        /// Port x lock bit y (y= 0..15)
        @ReadWrite(bits: 12..<13, as: LCK12Values.self)
        var lck12: LCK12

        /// Port x lock bit y (y= 0..15)
        @ReadWrite(bits: 11..<12, as: LCK11Values.self)
        var lck11: LCK11

        /// Port x lock bit y (y= 0..15)
        @ReadWrite(bits: 10..<11, as: LCK10Values.self)
        var lck10: LCK10

        /// Port x lock bit y (y= 0..15)
        @ReadWrite(bits: 9..<10, as: LCK9Values.self)
        var lck9: LCK9

        /// Port x lock bit y (y= 0..15)
        @ReadWrite(bits: 8..<9, as: LCK8Values.self)
        var lck8: LCK8

        /// Port x lock bit y (y= 0..15)
        @ReadWrite(bits: 7..<8, as: LCK7Values.self)
        var lck7: LCK7

        /// Port x lock bit y (y= 0..15)
        @ReadWrite(bits: 6..<7, as: LCK6Values.self)
        var lck6: LCK6

        /// Port x lock bit y (y= 0..15)
        @ReadWrite(bits: 5..<6, as: LCK5Values.self)
        var lck5: LCK5

        /// Port x lock bit y (y= 0..15)
        @ReadWrite(bits: 4..<5, as: LCK4Values.self)
        var lck4: LCK4

        /// Port x lock bit y (y= 0..15)
        @ReadWrite(bits: 3..<4, as: LCK3Values.self)
        var lck3: LCK3

        /// Port x lock bit y (y= 0..15)
        @ReadWrite(bits: 2..<3, as: LCK2Values.self)
        var lck2: LCK2

        /// Port x lock bit y (y= 0..15)
        @ReadWrite(bits: 1..<2, as: LCK1Values.self)
        var lck1: LCK1

        /// Port x lock bit y (y= 0..15)
        @ReadWrite(bits: 0..<1, as: LCK0Values.self)
        var lck0: LCK0
    }

    /// GPIO alternate function low register
    @Register(bitWidth: 32)
    struct AFRL {
        /// Alternate function selection for port x bit y (y = 0..7)
        @ReadWrite(bits: 28..<32, as: AFRL7Values.self)
        var afrl7: AFRL7

        /// Alternate function selection for port x bit y (y = 0..7)
        @ReadWrite(bits: 24..<28, as: AFRL6Values.self)
        var afrl6: AFRL6

        /// Alternate function selection for port x bit y (y = 0..7)
        @ReadWrite(bits: 20..<24, as: AFRL5Values.self)
        var afrl5: AFRL5

        /// Alternate function selection for port x bit y (y = 0..7)
        @ReadWrite(bits: 16..<20, as: AFRL4Values.self)
        var afrl4: AFRL4

        /// Alternate function selection for port x bit y (y = 0..7)
        @ReadWrite(bits: 12..<16, as: AFRL3Values.self)
        var afrl3: AFRL3

        /// Alternate function selection for port x bit y (y = 0..7)
        @ReadWrite(bits: 8..<12, as: AFRL2Values.self)
        var afrl2: AFRL2

        /// Alternate function selection for port x bit y (y = 0..7)
        @ReadWrite(bits: 4..<8, as: AFRL1Values.self)
        var afrl1: AFRL1

        /// Alternate function selection for port x bit y (y = 0..7)
        @ReadWrite(bits: 0..<4, as: AFRL0Values.self)
        var afrl0: AFRL0
    }

    /// GPIO alternate function high register
    @Register(bitWidth: 32)
    struct AFRH {
        /// Alternate function selection for port x bit y (y = 8..15)
        @ReadWrite(bits: 28..<32, as: AFRH15Values.self)
        var afrh15: AFRH15

        /// Alternate function selection for port x bit y (y = 8..15)
        @ReadWrite(bits: 24..<28, as: AFRH14Values.self)
        var afrh14: AFRH14

        /// Alternate function selection for port x bit y (y = 8..15)
        @ReadWrite(bits: 20..<24, as: AFRH13Values.self)
        var afrh13: AFRH13

        /// Alternate function selection for port x bit y (y = 8..15)
        @ReadWrite(bits: 16..<20, as: AFRH12Values.self)
        var afrh12: AFRH12

        /// Alternate function selection for port x bit y (y = 8..15)
        @ReadWrite(bits: 12..<16, as: AFRH11Values.self)
        var afrh11: AFRH11

        /// Alternate function selection for port x bit y (y = 8..15)
        @ReadWrite(bits: 8..<12, as: AFRH10Values.self)
        var afrh10: AFRH10

        /// Alternate function selection for port x bit y (y = 8..15)
        @ReadWrite(bits: 4..<8, as: AFRH9Values.self)
        var afrh9: AFRH9

        /// Alternate function selection for port x bit y (y = 8..15)
        @ReadWrite(bits: 0..<4, as: AFRH8Values.self)
        var afrh8: AFRH8
    }

    /// GPIO port bit reset register
    @Register(bitWidth: 32)
    struct BRR {
        /// Port A Reset bit 0
        @ReadWrite(bits: 0..<1)
        var br0: BR0

        /// Port A Reset bit 1
        @ReadWrite(bits: 1..<2)
        var br1: BR1

        /// Port A Reset bit 2
        @ReadWrite(bits: 2..<3)
        var br2: BR2

        /// Port A Reset bit 3
        @ReadWrite(bits: 3..<4)
        var br3: BR3

        /// Port A Reset bit 4
        @ReadWrite(bits: 4..<5)
        var br4: BR4

        /// Port A Reset bit 5
        @ReadWrite(bits: 5..<6)
        var br5: BR5

        /// Port A Reset bit 6
        @ReadWrite(bits: 6..<7)
        var br6: BR6

        /// Port A Reset bit 7
        @ReadWrite(bits: 7..<8)
        var br7: BR7

        /// Port A Reset bit 8
        @ReadWrite(bits: 8..<9)
        var br8: BR8

        /// Port A Reset bit 9
        @ReadWrite(bits: 9..<10)
        var br9: BR9

        /// Port A Reset bit 10
        @ReadWrite(bits: 10..<11)
        var br10: BR10

        /// Port A Reset bit 11
        @ReadWrite(bits: 11..<12)
        var br11: BR11

        /// Port A Reset bit 12
        @ReadWrite(bits: 12..<13)
        var br12: BR12

        /// Port A Reset bit 13
        @ReadWrite(bits: 13..<14)
        var br13: BR13

        /// Port A Reset bit 14
        @ReadWrite(bits: 14..<15)
        var br14: BR14

        /// Port A Reset bit 15
        @ReadWrite(bits: 15..<16)
        var br15: BR15
    }
}

extension GPIOA.MODER {
    struct MODER15Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 2

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.MODER {
    struct MODER14Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 2

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.MODER {
    struct MODER13Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 2

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.MODER {
    struct MODER12Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 2

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.MODER {
    struct MODER11Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 2

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.MODER {
    struct MODER10Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 2

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.MODER {
    struct MODER9Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 2

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.MODER {
    struct MODER8Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 2

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.MODER {
    struct MODER7Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 2

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.MODER {
    struct MODER6Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 2

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.MODER {
    struct MODER5Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 2

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.MODER {
    struct MODER4Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 2

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.MODER {
    struct MODER3Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 2

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.MODER {
    struct MODER2Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 2

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.MODER {
    struct MODER1Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 2

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.MODER {
    struct MODER0Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 2

        /// Input mode (reset state)
        static let Input = Self(rawValue: 0x0)

        /// General purpose output mode
        static let Output = Self(rawValue: 0x1)

        /// Alternate function mode
        static let Alternate = Self(rawValue: 0x2)

        /// Analog mode
        static let Analog = Self(rawValue: 0x3)

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.OTYPER {
    struct OT15Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.OTYPER {
    struct OT14Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.OTYPER {
    struct OT13Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.OTYPER {
    struct OT12Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.OTYPER {
    struct OT11Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.OTYPER {
    struct OT10Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.OTYPER {
    struct OT9Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.OTYPER {
    struct OT8Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.OTYPER {
    struct OT7Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.OTYPER {
    struct OT6Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.OTYPER {
    struct OT5Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.OTYPER {
    struct OT4Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.OTYPER {
    struct OT3Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.OTYPER {
    struct OT2Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.OTYPER {
    struct OT1Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.OTYPER {
    struct OT0Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        /// Output push-pull (reset state)
        static let PushPull = Self(rawValue: 0x0)

        /// Output open-drain
        static let OpenDrain = Self(rawValue: 0x1)

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.OSPEEDR {
    struct OSPEEDR15Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 2

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.OSPEEDR {
    struct OSPEEDR14Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 2

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.OSPEEDR {
    struct OSPEEDR13Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 2

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.OSPEEDR {
    struct OSPEEDR12Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 2

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.OSPEEDR {
    struct OSPEEDR11Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 2

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.OSPEEDR {
    struct OSPEEDR10Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 2

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.OSPEEDR {
    struct OSPEEDR9Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 2

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.OSPEEDR {
    struct OSPEEDR8Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 2

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.OSPEEDR {
    struct OSPEEDR7Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 2

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.OSPEEDR {
    struct OSPEEDR6Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 2

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.OSPEEDR {
    struct OSPEEDR5Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 2

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.OSPEEDR {
    struct OSPEEDR4Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 2

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.OSPEEDR {
    struct OSPEEDR3Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 2

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.OSPEEDR {
    struct OSPEEDR2Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 2

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.OSPEEDR {
    struct OSPEEDR1Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 2

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.OSPEEDR {
    struct OSPEEDR0Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 2

        /// Low speed
        static let LowSpeed = Self(rawValue: 0x0)

        /// Medium speed
        static let MediumSpeed = Self(rawValue: 0x1)

        /// High speed
        static let HighSpeed = Self(rawValue: 0x2)

        /// Very high speed
        static let VeryHighSpeed = Self(rawValue: 0x3)

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.PUPDR {
    struct PUPDR15Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 2

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.PUPDR {
    struct PUPDR14Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 2

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.PUPDR {
    struct PUPDR13Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 2

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.PUPDR {
    struct PUPDR12Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 2

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.PUPDR {
    struct PUPDR11Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 2

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.PUPDR {
    struct PUPDR10Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 2

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.PUPDR {
    struct PUPDR9Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 2

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.PUPDR {
    struct PUPDR8Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 2

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.PUPDR {
    struct PUPDR7Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 2

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.PUPDR {
    struct PUPDR6Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 2

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.PUPDR {
    struct PUPDR5Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 2

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.PUPDR {
    struct PUPDR4Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 2

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.PUPDR {
    struct PUPDR3Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 2

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.PUPDR {
    struct PUPDR2Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 2

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.PUPDR {
    struct PUPDR1Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 2

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.PUPDR {
    struct PUPDR0Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 2

        /// No pull-up, pull-down
        static let Floating = Self(rawValue: 0x0)

        /// Pull-up
        static let PullUp = Self(rawValue: 0x1)

        /// Pull-down
        static let PullDown = Self(rawValue: 0x2)

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.IDR {
    struct IDR15Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.IDR {
    struct IDR14Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.IDR {
    struct IDR13Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.IDR {
    struct IDR12Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.IDR {
    struct IDR11Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.IDR {
    struct IDR10Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.IDR {
    struct IDR9Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.IDR {
    struct IDR8Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.IDR {
    struct IDR7Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.IDR {
    struct IDR6Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.IDR {
    struct IDR5Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.IDR {
    struct IDR4Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.IDR {
    struct IDR3Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.IDR {
    struct IDR2Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.IDR {
    struct IDR1Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.ODR {
    struct ODR15Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.ODR {
    struct ODR14Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.ODR {
    struct ODR13Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.ODR {
    struct ODR12Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.ODR {
    struct ODR11Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.ODR {
    struct ODR10Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.ODR {
    struct ODR9Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.ODR {
    struct ODR8Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.ODR {
    struct ODR7Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.ODR {
    struct ODR6Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.ODR {
    struct ODR5Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.ODR {
    struct ODR4Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.ODR {
    struct ODR3Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.ODR {
    struct ODR2Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.ODR {
    struct ODR1Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.ODR {
    struct ODR0Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        /// Set output to logic low
        static let Low = Self(rawValue: 0x0)

        /// Set output to logic high
        static let High = Self(rawValue: 0x1)

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.BSRR {
    struct BR15Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.BSRR {
    struct BR14Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.BSRR {
    struct BR13Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.BSRR {
    struct BR12Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.BSRR {
    struct BR11Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.BSRR {
    struct BR10Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.BSRR {
    struct BR9Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.BSRR {
    struct BR8Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.BSRR {
    struct BR7Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.BSRR {
    struct BR6Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.BSRR {
    struct BR5Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.BSRR {
    struct BR4Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.BSRR {
    struct BR3Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.BSRR {
    struct BR2Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.BSRR {
    struct BR1Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.BSRR {
    struct BS15Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.BSRR {
    struct BS14Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.BSRR {
    struct BS13Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.BSRR {
    struct BS12Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.BSRR {
    struct BS11Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.BSRR {
    struct BS10Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.BSRR {
    struct BS9Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.BSRR {
    struct BS8Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.BSRR {
    struct BS7Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.BSRR {
    struct BS6Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.BSRR {
    struct BS5Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.BSRR {
    struct BS4Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.BSRR {
    struct BS3Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.BSRR {
    struct BS2Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.BSRR {
    struct BS1Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.LCKR {
    struct LCKKValues: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        /// Port configuration lock key not active
        static let NotActive = Self(rawValue: 0x0)

        /// Port configuration lock key active
        static let Active = Self(rawValue: 0x1)

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.LCKR {
    struct LCK15Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.LCKR {
    struct LCK14Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.LCKR {
    struct LCK13Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.LCKR {
    struct LCK12Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.LCKR {
    struct LCK11Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.LCKR {
    struct LCK10Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.LCKR {
    struct LCK9Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.LCKR {
    struct LCK8Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.LCKR {
    struct LCK7Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.LCKR {
    struct LCK6Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.LCKR {
    struct LCK5Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.LCKR {
    struct LCK4Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.LCKR {
    struct LCK3Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.LCKR {
    struct LCK2Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.LCKR {
    struct LCK1Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.LCKR {
    struct LCK0Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 1

        /// Port configuration not locked
        static let Unlocked = Self(rawValue: 0x0)

        /// Port configuration locked
        static let Locked = Self(rawValue: 0x1)

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.AFRL {
    struct AFRL7Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 4

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.AFRL {
    struct AFRL6Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 4

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.AFRL {
    struct AFRL5Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 4

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.AFRL {
    struct AFRL4Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 4

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.AFRL {
    struct AFRL3Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 4

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.AFRL {
    struct AFRL2Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 4

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.AFRL {
    struct AFRL1Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 4

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.AFRL {
    struct AFRL0Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 4

        /// AF0
        static let AF0 = Self(rawValue: 0x0)

        /// AF1
        static let AF1 = Self(rawValue: 0x1)

        /// AF2
        static let AF2 = Self(rawValue: 0x2)

        /// AF3
        static let AF3 = Self(rawValue: 0x3)

        /// AF4
        static let AF4 = Self(rawValue: 0x4)

        /// AF5
        static let AF5 = Self(rawValue: 0x5)

        /// AF6
        static let AF6 = Self(rawValue: 0x6)

        /// AF7
        static let AF7 = Self(rawValue: 0x7)

        /// AF8
        static let AF8 = Self(rawValue: 0x8)

        /// AF9
        static let AF9 = Self(rawValue: 0x9)

        /// AF10
        static let AF10 = Self(rawValue: 0xa)

        /// AF11
        static let AF11 = Self(rawValue: 0xb)

        /// AF12
        static let AF12 = Self(rawValue: 0xc)

        /// AF13
        static let AF13 = Self(rawValue: 0xd)

        /// AF14
        static let AF14 = Self(rawValue: 0xe)

        /// AF15
        static let AF15 = Self(rawValue: 0xf)

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.AFRH {
    struct AFRH15Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 4

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.AFRH {
    struct AFRH14Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 4

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.AFRH {
    struct AFRH13Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 4

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.AFRH {
    struct AFRH12Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 4

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.AFRH {
    struct AFRH11Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 4

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.AFRH {
    struct AFRH10Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 4

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.AFRH {
    struct AFRH9Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 4

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension GPIOA.AFRH {
    struct AFRH8Values: BitFieldProjectable, RawRepresentable {
        static let bitWidth = 4

        /// AF0
        static let AF0 = Self(rawValue: 0x0)

        /// AF1
        static let AF1 = Self(rawValue: 0x1)

        /// AF2
        static let AF2 = Self(rawValue: 0x2)

        /// AF3
        static let AF3 = Self(rawValue: 0x3)

        /// AF4
        static let AF4 = Self(rawValue: 0x4)

        /// AF5
        static let AF5 = Self(rawValue: 0x5)

        /// AF6
        static let AF6 = Self(rawValue: 0x6)

        /// AF7
        static let AF7 = Self(rawValue: 0x7)

        /// AF8
        static let AF8 = Self(rawValue: 0x8)

        /// AF9
        static let AF9 = Self(rawValue: 0x9)

        /// AF10
        static let AF10 = Self(rawValue: 0xa)

        /// AF11
        static let AF11 = Self(rawValue: 0xb)

        /// AF12
        static let AF12 = Self(rawValue: 0xc)

        /// AF13
        static let AF13 = Self(rawValue: 0xd)

        /// AF14
        static let AF14 = Self(rawValue: 0xe)

        /// AF15
        static let AF15 = Self(rawValue: 0xf)

        var rawValue: UInt8

        @inlinable @inline(__always)
        init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}
