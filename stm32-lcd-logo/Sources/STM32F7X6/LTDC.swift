// Generated by svd2swift.

import MMIO

/// LCD-TFT Controller
@RegisterBlock
public struct LTDC {
  /// Synchronization Size Configuration Register
  @RegisterBlock(offset: 0x8)
  public var sscr: Register<SSCR>

  /// Back Porch Configuration Register
  @RegisterBlock(offset: 0xc)
  public var bpcr: Register<BPCR>

  /// Active Width Configuration Register
  @RegisterBlock(offset: 0x10)
  public var awcr: Register<AWCR>

  /// Total Width Configuration Register
  @RegisterBlock(offset: 0x14)
  public var twcr: Register<TWCR>

  /// Global Control Register
  @RegisterBlock(offset: 0x18)
  public var gcr: Register<GCR>

  /// Shadow Reload Configuration Register
  @RegisterBlock(offset: 0x24)
  public var srcr: Register<SRCR>

  /// Background Color Configuration Register
  @RegisterBlock(offset: 0x2c)
  public var bccr: Register<BCCR>

  /// Interrupt Enable Register
  @RegisterBlock(offset: 0x34)
  public var ier: Register<IER>

  /// Interrupt Status Register
  @RegisterBlock(offset: 0x38)
  public var isr: Register<ISR>

  /// Interrupt Clear Register
  @RegisterBlock(offset: 0x3c)
  public var icr: Register<ICR>

  /// Line Interrupt Position Configuration Register
  @RegisterBlock(offset: 0x40)
  public var lipcr: Register<LIPCR>

  /// Current Position Status Register
  @RegisterBlock(offset: 0x44)
  public var cpsr: Register<CPSR>

  /// Current Display Status Register
  @RegisterBlock(offset: 0x48)
  public var cdsr: Register<CDSR>

  /// Cluster LAYER%s, containing L?CR, L?WHPCR, L?WVPCR, L?CKCR, L?PFCR, L?CACR, L?DCCR, L?BFCR, L?CFBAR, L?CFBLR, L?CFBLNR, L?CLUTWR
  @RegisterBlock(offset: 0x84, stride: 0x80, count: 2)
  public var layer: RegisterArray<LAYER>
}

extension LTDC {
  /// Synchronization Size Configuration Register
  @Register(bitWidth: 32)
  public struct SSCR {
    /// Horizontal Synchronization Width (in units of pixel clock period)
    @ReadWrite(bits: 16..<28)
    public var hsw: HSW

    /// Vertical Synchronization Height (in units of horizontal scan line)
    @ReadWrite(bits: 0..<11)
    public var vsh: VSH
  }

  /// Back Porch Configuration Register
  @Register(bitWidth: 32)
  public struct BPCR {
    /// Accumulated Horizontal back porch (in units of pixel clock period)
    @ReadWrite(bits: 16..<28)
    public var ahbp: AHBP

    /// Accumulated Vertical back porch (in units of horizontal scan line)
    @ReadWrite(bits: 0..<11)
    public var avbp: AVBP
  }

  /// Active Width Configuration Register
  @Register(bitWidth: 32)
  public struct AWCR {
    /// Accumulated Active Width (in units of pixel clock period)
    @ReadWrite(bits: 16..<28)
    public var aaw: AAW

    /// Accumulated Active Height (in units of horizontal scan line)
    @ReadWrite(bits: 0..<11)
    public var aah: AAH
  }

  /// Total Width Configuration Register
  @Register(bitWidth: 32)
  public struct TWCR {
    /// Total Width (in units of pixel clock period)
    @ReadWrite(bits: 16..<28)
    public var totalw: TOTALW

    /// Total Height (in units of horizontal scan line)
    @ReadWrite(bits: 0..<11)
    public var totalh: TOTALH
  }

  /// Global Control Register
  @Register(bitWidth: 32)
  public struct GCR {
    /// Horizontal Synchronization Polarity
    @ReadWrite(bits: 31..<32, as: HSPOLValues.self)
    public var hspol: HSPOL

    /// Vertical Synchronization Polarity
    @ReadWrite(bits: 30..<31, as: VSPOLValues.self)
    public var vspol: VSPOL

    /// Data Enable Polarity
    @ReadWrite(bits: 29..<30, as: DEPOLValues.self)
    public var depol: DEPOL

    /// Pixel Clock Polarity
    @ReadWrite(bits: 28..<29, as: PCPOLValues.self)
    public var pcpol: PCPOL

    /// Dither Enable
    @ReadWrite(bits: 16..<17, as: DENValues.self)
    public var den: DEN

    /// Dither Red Width
    @ReadOnly(bits: 12..<15)
    public var drw: DRW

    /// Dither Green Width
    @ReadOnly(bits: 8..<11)
    public var dgw: DGW

    /// Dither Blue Width
    @ReadOnly(bits: 4..<7)
    public var dbw: DBW

    /// LCD-TFT controller enable bit
    @ReadWrite(bits: 0..<1, as: LTDCENValues.self)
    public var ltdcen: LTDCEN
  }

  /// Shadow Reload Configuration Register
  @Register(bitWidth: 32)
  public struct SRCR {
    /// Vertical Blanking Reload
    @ReadWrite(bits: 1..<2, as: VBRValues.self)
    public var vbr: VBR

    /// Immediate Reload
    @ReadWrite(bits: 0..<1, as: IMRValues.self)
    public var imr: IMR
  }

  /// Background Color Configuration Register
  @Register(bitWidth: 32)
  public struct BCCR {
    /// Background color blue value
    @ReadWrite(bits: 0..<8)
    public var bcblue: BCBLUE

    /// Background color green value
    @ReadWrite(bits: 8..<16)
    public var bcgreen: BCGREEN

    /// Background color red value
    @ReadWrite(bits: 16..<24)
    public var bcred: BCRED
  }

  /// Interrupt Enable Register
  @Register(bitWidth: 32)
  public struct IER {
    /// Register Reload interrupt enable
    @ReadWrite(bits: 3..<4, as: RRIEValues.self)
    public var rrie: RRIE

    /// Transfer Error Interrupt Enable
    @ReadWrite(bits: 2..<3, as: TERRIEValues.self)
    public var terrie: TERRIE

    /// FIFO Underrun Interrupt Enable
    @ReadWrite(bits: 1..<2, as: FUIEValues.self)
    public var fuie: FUIE

    /// Line Interrupt Enable
    @ReadWrite(bits: 0..<1, as: LIEValues.self)
    public var lie: LIE
  }

  /// Interrupt Status Register
  @Register(bitWidth: 32)
  public struct ISR {
    /// Register Reload Interrupt Flag
    @ReadOnly(bits: 3..<4)
    public var rrif: RRIF

    /// Transfer Error interrupt flag
    @ReadOnly(bits: 2..<3)
    public var terrif: TERRIF

    /// FIFO Underrun Interrupt flag
    @ReadOnly(bits: 1..<2)
    public var fuif: FUIF

    /// Line Interrupt flag
    @ReadOnly(bits: 0..<1)
    public var lif: LIF
  }

  /// Interrupt Clear Register
  @Register(bitWidth: 32)
  public struct ICR {
    /// Clears Register Reload Interrupt Flag
    @WriteOnly(bits: 3..<4)
    public var crrif: CRRIF

    /// Clears the Transfer Error Interrupt Flag
    @WriteOnly(bits: 2..<3)
    public var cterrif: CTERRIF

    /// Clears the FIFO Underrun Interrupt flag
    @WriteOnly(bits: 1..<2)
    public var cfuif: CFUIF

    /// Clears the Line Interrupt Flag
    @WriteOnly(bits: 0..<1)
    public var clif: CLIF
  }

  /// Line Interrupt Position Configuration Register
  @Register(bitWidth: 32)
  public struct LIPCR {
    /// Line Interrupt Position
    @ReadWrite(bits: 0..<11)
    public var lipos: LIPOS
  }

  /// Current Position Status Register
  @Register(bitWidth: 32)
  public struct CPSR {
    /// Current X Position
    @ReadOnly(bits: 16..<32)
    public var cxpos: CXPOS

    /// Current Y Position
    @ReadOnly(bits: 0..<16)
    public var cypos: CYPOS
  }

  /// Current Display Status Register
  @Register(bitWidth: 32)
  public struct CDSR {
    /// Horizontal Synchronization display Status
    @ReadOnly(bits: 3..<4)
    public var hsyncs: HSYNCS

    /// Vertical Synchronization display Status
    @ReadOnly(bits: 2..<3)
    public var vsyncs: VSYNCS

    /// Horizontal Data Enable display Status
    @ReadOnly(bits: 1..<2)
    public var hdes: HDES

    /// Vertical Data Enable display Status
    @ReadOnly(bits: 0..<1)
    public var vdes: VDES
  }

  /// Cluster LAYER%s, containing L?CR, L?WHPCR, L?WVPCR, L?CKCR, L?PFCR, L?CACR, L?DCCR, L?BFCR, L?CFBAR, L?CFBLR, L?CFBLNR, L?CLUTWR
  @RegisterBlock
  public struct LAYER {
    /// Layerx Control Register
    @RegisterBlock(offset: 0x0)
    public var cr: Register<CR>

    /// Layerx Window Horizontal Position Configuration Register
    @RegisterBlock(offset: 0x4)
    public var whpcr: Register<WHPCR>

    /// Layerx Window Vertical Position Configuration Register
    @RegisterBlock(offset: 0x8)
    public var wvpcr: Register<WVPCR>

    /// Layerx Color Keying Configuration Register
    @RegisterBlock(offset: 0xc)
    public var ckcr: Register<CKCR>

    /// Layerx Pixel Format Configuration Register
    @RegisterBlock(offset: 0x10)
    public var pfcr: Register<PFCR>

    /// Layerx Constant Alpha Configuration Register
    @RegisterBlock(offset: 0x14)
    public var cacr: Register<CACR>

    /// Layerx Default Color Configuration Register
    @RegisterBlock(offset: 0x18)
    public var dccr: Register<DCCR>

    /// Layerx Blending Factors Configuration Register
    @RegisterBlock(offset: 0x1c)
    public var bfcr: Register<BFCR>

    /// Layerx Color Frame Buffer Address Register
    @RegisterBlock(offset: 0x28)
    public var cfbar: Register<CFBAR>

    /// Layerx Color Frame Buffer Length Register
    @RegisterBlock(offset: 0x2c)
    public var cfblr: Register<CFBLR>

    /// Layerx ColorFrame Buffer Line Number Register
    @RegisterBlock(offset: 0x30)
    public var cfblnr: Register<CFBLNR>

    /// Layerx CLUT Write Register
    @RegisterBlock(offset: 0x40)
    public var clutwr: Register<CLUTWR>
  }
}

extension LTDC.LAYER {
  /// Layerx Control Register
  @Register(bitWidth: 32)
  public struct CR {
    /// Color Look-Up Table Enable
    @ReadWrite(bits: 4..<5, as: CLUTENValues.self)
    public var cluten: CLUTEN

    /// Color Keying Enable
    @ReadWrite(bits: 1..<2, as: COLKENValues.self)
    public var colken: COLKEN

    /// Layer Enable
    @ReadWrite(bits: 0..<1, as: LENValues.self)
    public var len: LEN
  }

  /// Layerx Window Horizontal Position Configuration Register
  @Register(bitWidth: 32)
  public struct WHPCR {
    /// Window Horizontal Stop Position
    @ReadWrite(bits: 16..<28)
    public var whsppos: WHSPPOS

    /// Window Horizontal Start Position
    @ReadWrite(bits: 0..<12)
    public var whstpos: WHSTPOS
  }

  /// Layerx Window Vertical Position Configuration Register
  @Register(bitWidth: 32)
  public struct WVPCR {
    /// Window Vertical Stop Position
    @ReadWrite(bits: 16..<27)
    public var wvsppos: WVSPPOS

    /// Window Vertical Start Position
    @ReadWrite(bits: 0..<11)
    public var wvstpos: WVSTPOS
  }

  /// Layerx Color Keying Configuration Register
  @Register(bitWidth: 32)
  public struct CKCR {
    /// Color Key Red value
    @ReadWrite(bits: 16..<24)
    public var ckred: CKRED

    /// Color Key Green value
    @ReadWrite(bits: 8..<16)
    public var ckgreen: CKGREEN

    /// Color Key Blue value
    @ReadWrite(bits: 0..<8)
    public var ckblue: CKBLUE
  }

  /// Layerx Pixel Format Configuration Register
  @Register(bitWidth: 32)
  public struct PFCR {
    /// Pixel Format
    @ReadWrite(bits: 0..<3, as: PFValues.self)
    public var pf: PF
  }

  /// Layerx Constant Alpha Configuration Register
  @Register(bitWidth: 32)
  public struct CACR {
    /// Constant Alpha
    @ReadWrite(bits: 0..<8)
    public var consta: CONSTA
  }

  /// Layerx Default Color Configuration Register
  @Register(bitWidth: 32)
  public struct DCCR {
    /// Default Color Alpha
    @ReadWrite(bits: 24..<32)
    public var dcalpha: DCALPHA

    /// Default Color Red
    @ReadWrite(bits: 16..<24)
    public var dcred: DCRED

    /// Default Color Green
    @ReadWrite(bits: 8..<16)
    public var dcgreen: DCGREEN

    /// Default Color Blue
    @ReadWrite(bits: 0..<8)
    public var dcblue: DCBLUE
  }

  /// Layerx Blending Factors Configuration Register
  @Register(bitWidth: 32)
  public struct BFCR {
    /// Blending Factor 1
    @ReadWrite(bits: 8..<11, as: BF1Values.self)
    public var bf1: BF1

    /// Blending Factor 2
    @ReadWrite(bits: 0..<3, as: BF2Values.self)
    public var bf2: BF2
  }

  /// Layerx Color Frame Buffer Address Register
  @Register(bitWidth: 32)
  public struct CFBAR {
    /// Color Frame Buffer Start Address
    @ReadWrite(bits: 0..<32)
    public var cfbadd: CFBADD
  }

  /// Layerx Color Frame Buffer Length Register
  @Register(bitWidth: 32)
  public struct CFBLR {
    /// Color Frame Buffer Pitch in bytes
    @ReadWrite(bits: 16..<29)
    public var cfbp: CFBP

    /// Color Frame Buffer Line Length
    @ReadWrite(bits: 0..<13)
    public var cfbll: CFBLL
  }

  /// Layerx ColorFrame Buffer Line Number Register
  @Register(bitWidth: 32)
  public struct CFBLNR {
    /// Frame Buffer Line Number
    @ReadWrite(bits: 0..<11)
    public var cfblnbr: CFBLNBR
  }

  /// Layerx CLUT Write Register
  @Register(bitWidth: 32)
  public struct CLUTWR {
    /// CLUT Address
    @WriteOnly(bits: 24..<32)
    public var clutadd: CLUTADD

    /// Red value
    @WriteOnly(bits: 16..<24)
    public var red: RED

    /// Green value
    @WriteOnly(bits: 8..<16)
    public var green: GREEN

    /// Blue value
    @WriteOnly(bits: 0..<8)
    public var blue: BLUE
  }
}

extension LTDC.GCR {
  public struct HSPOLValues: BitFieldProjectable, RawRepresentable {
    public static let bitWidth = 1

    /// Horizontal synchronization polarity is active low
    public static let ActiveLow = Self(rawValue: 0x0)

    /// Horizontal synchronization polarity is active high
    public static let ActiveHigh = Self(rawValue: 0x1)

    public var rawValue: UInt8

    @inlinable @inline(__always)
    public init(rawValue: Self.RawValue) {
      self.rawValue = rawValue
    }
  }
}

extension LTDC.GCR {
  public struct VSPOLValues: BitFieldProjectable, RawRepresentable {
    public static let bitWidth = 1

    /// Vertical synchronization polarity is active low
    public static let ActiveLow = Self(rawValue: 0x0)

    /// Vertical synchronization polarity is active high
    public static let ActiveHigh = Self(rawValue: 0x1)

    public var rawValue: UInt8

    @inlinable @inline(__always)
    public init(rawValue: Self.RawValue) {
      self.rawValue = rawValue
    }
  }
}

extension LTDC.GCR {
  public struct DEPOLValues: BitFieldProjectable, RawRepresentable {
    public static let bitWidth = 1

    /// Data enable polarity is active low
    public static let ActiveLow = Self(rawValue: 0x0)

    /// Data enable polarity is active high
    public static let ActiveHigh = Self(rawValue: 0x1)

    public var rawValue: UInt8

    @inlinable @inline(__always)
    public init(rawValue: Self.RawValue) {
      self.rawValue = rawValue
    }
  }
}

extension LTDC.GCR {
  public struct PCPOLValues: BitFieldProjectable, RawRepresentable {
    public static let bitWidth = 1

    /// Pixel clock on rising edge
    public static let RisingEdge = Self(rawValue: 0x0)

    /// Pixel clock on falling edge
    public static let FallingEdge = Self(rawValue: 0x1)

    public var rawValue: UInt8

    @inlinable @inline(__always)
    public init(rawValue: Self.RawValue) {
      self.rawValue = rawValue
    }
  }
}

extension LTDC.GCR {
  public struct DENValues: BitFieldProjectable, RawRepresentable {
    public static let bitWidth = 1

    /// Dither disabled
    public static let Disabled = Self(rawValue: 0x0)

    /// Dither enabled
    public static let Enabled = Self(rawValue: 0x1)

    public var rawValue: UInt8

    @inlinable @inline(__always)
    public init(rawValue: Self.RawValue) {
      self.rawValue = rawValue
    }
  }
}

extension LTDC.GCR {
  public struct LTDCENValues: BitFieldProjectable, RawRepresentable {
    public static let bitWidth = 1

    /// LCD-TFT controller disabled
    public static let Disabled = Self(rawValue: 0x0)

    /// LCD-TFT controller enabled
    public static let Enabled = Self(rawValue: 0x1)

    public var rawValue: UInt8

    @inlinable @inline(__always)
    public init(rawValue: Self.RawValue) {
      self.rawValue = rawValue
    }
  }
}

extension LTDC.SRCR {
  public struct VBRValues: BitFieldProjectable, RawRepresentable {
    public static let bitWidth = 1

    /// This bit is set by software and cleared only by hardware after reload (it cannot be cleared through register write once it is set)
    public static let NoEffect = Self(rawValue: 0x0)

    /// The shadow registers are reloaded during the vertical blanking period (at the beginning of the first line after the active display area).
    public static let Reload = Self(rawValue: 0x1)

    public var rawValue: UInt8

    @inlinable @inline(__always)
    public init(rawValue: Self.RawValue) {
      self.rawValue = rawValue
    }
  }
}

extension LTDC.SRCR {
  public struct IMRValues: BitFieldProjectable, RawRepresentable {
    public static let bitWidth = 1

    /// This bit is set by software and cleared only by hardware after reload (it cannot be cleared through register write once it is set)
    public static let NoEffect = Self(rawValue: 0x0)

    /// The shadow registers are reloaded immediately. This bit is set by software and cleared only by hardware after reload
    public static let Reload = Self(rawValue: 0x1)

    public var rawValue: UInt8

    @inlinable @inline(__always)
    public init(rawValue: Self.RawValue) {
      self.rawValue = rawValue
    }
  }
}

extension LTDC.IER {
  public struct RRIEValues: BitFieldProjectable, RawRepresentable {
    public static let bitWidth = 1

    /// Register reload interrupt disabled
    public static let Disabled = Self(rawValue: 0x0)

    /// Register reload interrupt enabled
    public static let Enabled = Self(rawValue: 0x1)

    public var rawValue: UInt8

    @inlinable @inline(__always)
    public init(rawValue: Self.RawValue) {
      self.rawValue = rawValue
    }
  }
}

extension LTDC.IER {
  public struct TERRIEValues: BitFieldProjectable, RawRepresentable {
    public static let bitWidth = 1

    /// Transfer error interrupt disabled
    public static let Disabled = Self(rawValue: 0x0)

    /// Transfer error interrupt enabled
    public static let Enabled = Self(rawValue: 0x1)

    public var rawValue: UInt8

    @inlinable @inline(__always)
    public init(rawValue: Self.RawValue) {
      self.rawValue = rawValue
    }
  }
}

extension LTDC.IER {
  public struct FUIEValues: BitFieldProjectable, RawRepresentable {
    public static let bitWidth = 1

    /// FIFO underrun interrupt disabled
    public static let Disabled = Self(rawValue: 0x0)

    /// FIFO underrun interrupt enabled
    public static let Enabled = Self(rawValue: 0x1)

    public var rawValue: UInt8

    @inlinable @inline(__always)
    public init(rawValue: Self.RawValue) {
      self.rawValue = rawValue
    }
  }
}

extension LTDC.IER {
  public struct LIEValues: BitFieldProjectable, RawRepresentable {
    public static let bitWidth = 1

    /// Line interrupt disabled
    public static let Disabled = Self(rawValue: 0x0)

    /// Line interrupt enabled
    public static let Enabled = Self(rawValue: 0x1)

    public var rawValue: UInt8

    @inlinable @inline(__always)
    public init(rawValue: Self.RawValue) {
      self.rawValue = rawValue
    }
  }
}

extension LTDC.LAYER.CR {
  public struct CLUTENValues: BitFieldProjectable, RawRepresentable {
    public static let bitWidth = 1

    /// Color look-up table disabled
    public static let Disabled = Self(rawValue: 0x0)

    /// Color look-up table enabled
    public static let Enabled = Self(rawValue: 0x1)

    public var rawValue: UInt8

    @inlinable @inline(__always)
    public init(rawValue: Self.RawValue) {
      self.rawValue = rawValue
    }
  }
}

extension LTDC.LAYER.CR {
  public struct COLKENValues: BitFieldProjectable, RawRepresentable {
    public static let bitWidth = 1

    /// Color keying disabled
    public static let Disabled = Self(rawValue: 0x0)

    /// Color keying enabled
    public static let Enabled = Self(rawValue: 0x1)

    public var rawValue: UInt8

    @inlinable @inline(__always)
    public init(rawValue: Self.RawValue) {
      self.rawValue = rawValue
    }
  }
}

extension LTDC.LAYER.CR {
  public struct LENValues: BitFieldProjectable, RawRepresentable {
    public static let bitWidth = 1

    /// Layer disabled
    public static let Disabled = Self(rawValue: 0x0)

    /// Layer enabled
    public static let Enabled = Self(rawValue: 0x1)

    public var rawValue: UInt8

    @inlinable @inline(__always)
    public init(rawValue: Self.RawValue) {
      self.rawValue = rawValue
    }
  }
}

extension LTDC.LAYER.PFCR {
  public struct PFValues: BitFieldProjectable, RawRepresentable {
    public static let bitWidth = 3

    /// ARGB8888
    public static let ARGB8888 = Self(rawValue: 0x0)

    /// RGB888
    public static let RGB888 = Self(rawValue: 0x1)

    /// RGB565
    public static let RGB565 = Self(rawValue: 0x2)

    /// ARGB1555
    public static let ARGB1555 = Self(rawValue: 0x3)

    /// ARGB4444
    public static let ARGB4444 = Self(rawValue: 0x4)

    /// L8 (8-bit luminance)
    public static let L8 = Self(rawValue: 0x5)

    /// AL44 (4-bit alpha, 4-bit luminance)
    public static let AL44 = Self(rawValue: 0x6)

    /// AL88 (8-bit alpha, 8-bit luminance)
    public static let AL88 = Self(rawValue: 0x7)

    public var rawValue: UInt8

    @inlinable @inline(__always)
    public init(rawValue: Self.RawValue) {
      self.rawValue = rawValue
    }
  }
}

extension LTDC.LAYER.BFCR {
  public struct BF1Values: BitFieldProjectable, RawRepresentable {
    public static let bitWidth = 3

    /// BF1 = constant alpha
    public static let Constant = Self(rawValue: 0x4)

    /// BF1 = pixel alpha * constant alpha
    public static let Pixel = Self(rawValue: 0x6)

    public var rawValue: UInt8

    @inlinable @inline(__always)
    public init(rawValue: Self.RawValue) {
      self.rawValue = rawValue
    }
  }
}

extension LTDC.LAYER.BFCR {
  public struct BF2Values: BitFieldProjectable, RawRepresentable {
    public static let bitWidth = 3

    /// BF2 = 1 - constant alpha
    public static let Constant = Self(rawValue: 0x5)

    /// BF2 = 1 - pixel alpha * constant alpha
    public static let Pixel = Self(rawValue: 0x7)

    public var rawValue: UInt8

    @inlinable @inline(__always)
    public init(rawValue: Self.RawValue) {
      self.rawValue = rawValue
    }
  }
}
