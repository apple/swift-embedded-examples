// Generated by svd2swift.

import MMIO

/// DMA controller
@RegisterBlock
struct DMA1 {
  /// low interrupt status register
  @RegisterBlock(offset: 0x0)
  var lisr: Register<LISR>

  /// high interrupt status register
  @RegisterBlock(offset: 0x4)
  var hisr: Register<HISR>

  /// low interrupt flag clear register
  @RegisterBlock(offset: 0x8)
  var lifcr: Register<LIFCR>

  /// high interrupt flag clear register
  @RegisterBlock(offset: 0xc)
  var hifcr: Register<HIFCR>

  /// stream x configuration register
  @RegisterBlock(offset: 0x10)
  var s0cr: Register<S0CR>

  /// stream x number of data register
  @RegisterBlock(offset: 0x14)
  var s0ndtr: Register<S0NDTR>

  /// stream x peripheral address register
  @RegisterBlock(offset: 0x18)
  var s0par: Register<S0PAR>

  /// stream x memory 0 address register
  @RegisterBlock(offset: 0x1c)
  var s0m0ar: Register<S0M0AR>

  /// stream x memory 1 address register
  @RegisterBlock(offset: 0x20)
  var s0m1ar: Register<S0M1AR>

  /// stream x FIFO control register
  @RegisterBlock(offset: 0x24)
  var s0fcr: Register<S0FCR>

  /// stream x configuration register
  @RegisterBlock(offset: 0x28)
  var s1cr: Register<S1CR>

  /// stream x number of data register
  @RegisterBlock(offset: 0x2c)
  var s1ndtr: Register<S1NDTR>

  /// stream x peripheral address register
  @RegisterBlock(offset: 0x30)
  var s1par: Register<S1PAR>

  /// stream x memory 0 address register
  @RegisterBlock(offset: 0x34)
  var s1m0ar: Register<S1M0AR>

  /// stream x memory 1 address register
  @RegisterBlock(offset: 0x38)
  var s1m1ar: Register<S1M1AR>

  /// stream x FIFO control register
  @RegisterBlock(offset: 0x3c)
  var s1fcr: Register<S1FCR>

  /// stream x configuration register
  @RegisterBlock(offset: 0x40)
  var s2cr: Register<S2CR>

  /// stream x number of data register
  @RegisterBlock(offset: 0x44)
  var s2ndtr: Register<S2NDTR>

  /// stream x peripheral address register
  @RegisterBlock(offset: 0x48)
  var s2par: Register<S2PAR>

  /// stream x memory 0 address register
  @RegisterBlock(offset: 0x4c)
  var s2m0ar: Register<S2M0AR>

  /// stream x memory 1 address register
  @RegisterBlock(offset: 0x50)
  var s2m1ar: Register<S2M1AR>

  /// stream x FIFO control register
  @RegisterBlock(offset: 0x54)
  var s2fcr: Register<S2FCR>

  /// stream x configuration register
  @RegisterBlock(offset: 0x58)
  var s3cr: Register<S3CR>

  /// stream x number of data register
  @RegisterBlock(offset: 0x5c)
  var s3ndtr: Register<S3NDTR>

  /// stream x peripheral address register
  @RegisterBlock(offset: 0x60)
  var s3par: Register<S3PAR>

  /// stream x memory 0 address register
  @RegisterBlock(offset: 0x64)
  var s3m0ar: Register<S3M0AR>

  /// stream x memory 1 address register
  @RegisterBlock(offset: 0x68)
  var s3m1ar: Register<S3M1AR>

  /// stream x FIFO control register
  @RegisterBlock(offset: 0x6c)
  var s3fcr: Register<S3FCR>

  /// stream x configuration register
  @RegisterBlock(offset: 0x70)
  var s4cr: Register<S4CR>

  /// stream x number of data register
  @RegisterBlock(offset: 0x74)
  var s4ndtr: Register<S4NDTR>

  /// stream x peripheral address register
  @RegisterBlock(offset: 0x78)
  var s4par: Register<S4PAR>

  /// stream x memory 0 address register
  @RegisterBlock(offset: 0x7c)
  var s4m0ar: Register<S4M0AR>

  /// stream x memory 1 address register
  @RegisterBlock(offset: 0x80)
  var s4m1ar: Register<S4M1AR>

  /// stream x FIFO control register
  @RegisterBlock(offset: 0x84)
  var s4fcr: Register<S4FCR>

  /// stream x configuration register
  @RegisterBlock(offset: 0x88)
  var s5cr: Register<S5CR>

  /// stream x number of data register
  @RegisterBlock(offset: 0x8c)
  var s5ndtr: Register<S5NDTR>

  /// stream x peripheral address register
  @RegisterBlock(offset: 0x90)
  var s5par: Register<S5PAR>

  /// stream x memory 0 address register
  @RegisterBlock(offset: 0x94)
  var s5m0ar: Register<S5M0AR>

  /// stream x memory 1 address register
  @RegisterBlock(offset: 0x98)
  var s5m1ar: Register<S5M1AR>

  /// stream x FIFO control register
  @RegisterBlock(offset: 0x9c)
  var s5fcr: Register<S5FCR>

  /// stream x configuration register
  @RegisterBlock(offset: 0xa0)
  var s6cr: Register<S6CR>

  /// stream x number of data register
  @RegisterBlock(offset: 0xa4)
  var s6ndtr: Register<S6NDTR>

  /// stream x peripheral address register
  @RegisterBlock(offset: 0xa8)
  var s6par: Register<S6PAR>

  /// stream x memory 0 address register
  @RegisterBlock(offset: 0xac)
  var s6m0ar: Register<S6M0AR>

  /// stream x memory 1 address register
  @RegisterBlock(offset: 0xb0)
  var s6m1ar: Register<S6M1AR>

  /// stream x FIFO control register
  @RegisterBlock(offset: 0xb4)
  var s6fcr: Register<S6FCR>

  /// stream x configuration register
  @RegisterBlock(offset: 0xb8)
  var s7cr: Register<S7CR>

  /// stream x number of data register
  @RegisterBlock(offset: 0xbc)
  var s7ndtr: Register<S7NDTR>

  /// stream x peripheral address register
  @RegisterBlock(offset: 0xc0)
  var s7par: Register<S7PAR>

  /// stream x memory 0 address register
  @RegisterBlock(offset: 0xc4)
  var s7m0ar: Register<S7M0AR>

  /// stream x memory 1 address register
  @RegisterBlock(offset: 0xc8)
  var s7m1ar: Register<S7M1AR>

  /// stream x FIFO control register
  @RegisterBlock(offset: 0xcc)
  var s7fcr: Register<S7FCR>
}

extension DMA1 {
  /// low interrupt status register
  @Register(bitWidth: 32)
  struct LISR {
    /// Stream x transfer complete interrupt flag (x = 3..0)
    @ReadOnly(bits: 27..<28)
    var tcif3: TCIF3

    /// Stream x half transfer interrupt flag (x=3..0)
    @ReadOnly(bits: 26..<27)
    var htif3: HTIF3

    /// Stream x transfer error interrupt flag (x=3..0)
    @ReadOnly(bits: 25..<26)
    var teif3: TEIF3

    /// Stream x direct mode error interrupt flag (x=3..0)
    @ReadOnly(bits: 24..<25)
    var dmeif3: DMEIF3

    /// Stream x FIFO error interrupt flag (x=3..0)
    @ReadOnly(bits: 22..<23)
    var feif3: FEIF3

    /// Stream x transfer complete interrupt flag (x = 3..0)
    @ReadOnly(bits: 21..<22)
    var tcif2: TCIF2

    /// Stream x half transfer interrupt flag (x=3..0)
    @ReadOnly(bits: 20..<21)
    var htif2: HTIF2

    /// Stream x transfer error interrupt flag (x=3..0)
    @ReadOnly(bits: 19..<20)
    var teif2: TEIF2

    /// Stream x direct mode error interrupt flag (x=3..0)
    @ReadOnly(bits: 18..<19)
    var dmeif2: DMEIF2

    /// Stream x FIFO error interrupt flag (x=3..0)
    @ReadOnly(bits: 16..<17)
    var feif2: FEIF2

    /// Stream x transfer complete interrupt flag (x = 3..0)
    @ReadOnly(bits: 11..<12)
    var tcif1: TCIF1

    /// Stream x half transfer interrupt flag (x=3..0)
    @ReadOnly(bits: 10..<11)
    var htif1: HTIF1

    /// Stream x transfer error interrupt flag (x=3..0)
    @ReadOnly(bits: 9..<10)
    var teif1: TEIF1

    /// Stream x direct mode error interrupt flag (x=3..0)
    @ReadOnly(bits: 8..<9)
    var dmeif1: DMEIF1

    /// Stream x FIFO error interrupt flag (x=3..0)
    @ReadOnly(bits: 6..<7)
    var feif1: FEIF1

    /// Stream x transfer complete interrupt flag (x = 3..0)
    @ReadOnly(bits: 5..<6)
    var tcif0: TCIF0

    /// Stream x half transfer interrupt flag (x=3..0)
    @ReadOnly(bits: 4..<5)
    var htif0: HTIF0

    /// Stream x transfer error interrupt flag (x=3..0)
    @ReadOnly(bits: 3..<4)
    var teif0: TEIF0

    /// Stream x direct mode error interrupt flag (x=3..0)
    @ReadOnly(bits: 2..<3)
    var dmeif0: DMEIF0

    /// Stream x FIFO error interrupt flag (x=3..0)
    @ReadOnly(bits: 0..<1)
    var feif0: FEIF0
  }

  /// high interrupt status register
  @Register(bitWidth: 32)
  struct HISR {
    /// Stream x transfer complete interrupt flag (x=7..4)
    @ReadOnly(bits: 27..<28)
    var tcif7: TCIF7

    /// Stream x half transfer interrupt flag (x=7..4)
    @ReadOnly(bits: 26..<27)
    var htif7: HTIF7

    /// Stream x transfer error interrupt flag (x=7..4)
    @ReadOnly(bits: 25..<26)
    var teif7: TEIF7

    /// Stream x direct mode error interrupt flag (x=7..4)
    @ReadOnly(bits: 24..<25)
    var dmeif7: DMEIF7

    /// Stream x FIFO error interrupt flag (x=7..4)
    @ReadOnly(bits: 22..<23)
    var feif7: FEIF7

    /// Stream x transfer complete interrupt flag (x=7..4)
    @ReadOnly(bits: 21..<22)
    var tcif6: TCIF6

    /// Stream x half transfer interrupt flag (x=7..4)
    @ReadOnly(bits: 20..<21)
    var htif6: HTIF6

    /// Stream x transfer error interrupt flag (x=7..4)
    @ReadOnly(bits: 19..<20)
    var teif6: TEIF6

    /// Stream x direct mode error interrupt flag (x=7..4)
    @ReadOnly(bits: 18..<19)
    var dmeif6: DMEIF6

    /// Stream x FIFO error interrupt flag (x=7..4)
    @ReadOnly(bits: 16..<17)
    var feif6: FEIF6

    /// Stream x transfer complete interrupt flag (x=7..4)
    @ReadOnly(bits: 11..<12)
    var tcif5: TCIF5

    /// Stream x half transfer interrupt flag (x=7..4)
    @ReadOnly(bits: 10..<11)
    var htif5: HTIF5

    /// Stream x transfer error interrupt flag (x=7..4)
    @ReadOnly(bits: 9..<10)
    var teif5: TEIF5

    /// Stream x direct mode error interrupt flag (x=7..4)
    @ReadOnly(bits: 8..<9)
    var dmeif5: DMEIF5

    /// Stream x FIFO error interrupt flag (x=7..4)
    @ReadOnly(bits: 6..<7)
    var feif5: FEIF5

    /// Stream x transfer complete interrupt flag (x=7..4)
    @ReadOnly(bits: 5..<6)
    var tcif4: TCIF4

    /// Stream x half transfer interrupt flag (x=7..4)
    @ReadOnly(bits: 4..<5)
    var htif4: HTIF4

    /// Stream x transfer error interrupt flag (x=7..4)
    @ReadOnly(bits: 3..<4)
    var teif4: TEIF4

    /// Stream x direct mode error interrupt flag (x=7..4)
    @ReadOnly(bits: 2..<3)
    var dmeif4: DMEIF4

    /// Stream x FIFO error interrupt flag (x=7..4)
    @ReadOnly(bits: 0..<1)
    var feif4: FEIF4
  }

  /// low interrupt flag clear register
  @Register(bitWidth: 32)
  struct LIFCR {
    /// Stream x clear transfer complete interrupt flag (x = 3..0)
    @ReadWrite(bits: 27..<28)
    var ctcif3: CTCIF3

    /// Stream x clear half transfer interrupt flag (x = 3..0)
    @ReadWrite(bits: 26..<27)
    var chtif3: CHTIF3

    /// Stream x clear transfer error interrupt flag (x = 3..0)
    @ReadWrite(bits: 25..<26)
    var cteif3: CTEIF3

    /// Stream x clear direct mode error interrupt flag (x = 3..0)
    @ReadWrite(bits: 24..<25)
    var cdmeif3: CDMEIF3

    /// Stream x clear FIFO error interrupt flag (x = 3..0)
    @ReadWrite(bits: 22..<23)
    var cfeif3: CFEIF3

    /// Stream x clear transfer complete interrupt flag (x = 3..0)
    @ReadWrite(bits: 21..<22)
    var ctcif2: CTCIF2

    /// Stream x clear half transfer interrupt flag (x = 3..0)
    @ReadWrite(bits: 20..<21)
    var chtif2: CHTIF2

    /// Stream x clear transfer error interrupt flag (x = 3..0)
    @ReadWrite(bits: 19..<20)
    var cteif2: CTEIF2

    /// Stream x clear direct mode error interrupt flag (x = 3..0)
    @ReadWrite(bits: 18..<19)
    var cdmeif2: CDMEIF2

    /// Stream x clear FIFO error interrupt flag (x = 3..0)
    @ReadWrite(bits: 16..<17)
    var cfeif2: CFEIF2

    /// Stream x clear transfer complete interrupt flag (x = 3..0)
    @ReadWrite(bits: 11..<12)
    var ctcif1: CTCIF1

    /// Stream x clear half transfer interrupt flag (x = 3..0)
    @ReadWrite(bits: 10..<11)
    var chtif1: CHTIF1

    /// Stream x clear transfer error interrupt flag (x = 3..0)
    @ReadWrite(bits: 9..<10)
    var cteif1: CTEIF1

    /// Stream x clear direct mode error interrupt flag (x = 3..0)
    @ReadWrite(bits: 8..<9)
    var cdmeif1: CDMEIF1

    /// Stream x clear FIFO error interrupt flag (x = 3..0)
    @ReadWrite(bits: 6..<7)
    var cfeif1: CFEIF1

    /// Stream x clear transfer complete interrupt flag (x = 3..0)
    @ReadWrite(bits: 5..<6)
    var ctcif0: CTCIF0

    /// Stream x clear half transfer interrupt flag (x = 3..0)
    @ReadWrite(bits: 4..<5)
    var chtif0: CHTIF0

    /// Stream x clear transfer error interrupt flag (x = 3..0)
    @ReadWrite(bits: 3..<4)
    var cteif0: CTEIF0

    /// Stream x clear direct mode error interrupt flag (x = 3..0)
    @ReadWrite(bits: 2..<3)
    var cdmeif0: CDMEIF0

    /// Stream x clear FIFO error interrupt flag (x = 3..0)
    @ReadWrite(bits: 0..<1)
    var cfeif0: CFEIF0
  }

  /// high interrupt flag clear register
  @Register(bitWidth: 32)
  struct HIFCR {
    /// Stream x clear transfer complete interrupt flag (x = 7..4)
    @ReadWrite(bits: 27..<28)
    var ctcif7: CTCIF7

    /// Stream x clear half transfer interrupt flag (x = 7..4)
    @ReadWrite(bits: 26..<27)
    var chtif7: CHTIF7

    /// Stream x clear transfer error interrupt flag (x = 7..4)
    @ReadWrite(bits: 25..<26)
    var cteif7: CTEIF7

    /// Stream x clear direct mode error interrupt flag (x = 7..4)
    @ReadWrite(bits: 24..<25)
    var cdmeif7: CDMEIF7

    /// Stream x clear FIFO error interrupt flag (x = 7..4)
    @ReadWrite(bits: 22..<23)
    var cfeif7: CFEIF7

    /// Stream x clear transfer complete interrupt flag (x = 7..4)
    @ReadWrite(bits: 21..<22)
    var ctcif6: CTCIF6

    /// Stream x clear half transfer interrupt flag (x = 7..4)
    @ReadWrite(bits: 20..<21)
    var chtif6: CHTIF6

    /// Stream x clear transfer error interrupt flag (x = 7..4)
    @ReadWrite(bits: 19..<20)
    var cteif6: CTEIF6

    /// Stream x clear direct mode error interrupt flag (x = 7..4)
    @ReadWrite(bits: 18..<19)
    var cdmeif6: CDMEIF6

    /// Stream x clear FIFO error interrupt flag (x = 7..4)
    @ReadWrite(bits: 16..<17)
    var cfeif6: CFEIF6

    /// Stream x clear transfer complete interrupt flag (x = 7..4)
    @ReadWrite(bits: 11..<12)
    var ctcif5: CTCIF5

    /// Stream x clear half transfer interrupt flag (x = 7..4)
    @ReadWrite(bits: 10..<11)
    var chtif5: CHTIF5

    /// Stream x clear transfer error interrupt flag (x = 7..4)
    @ReadWrite(bits: 9..<10)
    var cteif5: CTEIF5

    /// Stream x clear direct mode error interrupt flag (x = 7..4)
    @ReadWrite(bits: 8..<9)
    var cdmeif5: CDMEIF5

    /// Stream x clear FIFO error interrupt flag (x = 7..4)
    @ReadWrite(bits: 6..<7)
    var cfeif5: CFEIF5

    /// Stream x clear transfer complete interrupt flag (x = 7..4)
    @ReadWrite(bits: 5..<6)
    var ctcif4: CTCIF4

    /// Stream x clear half transfer interrupt flag (x = 7..4)
    @ReadWrite(bits: 4..<5)
    var chtif4: CHTIF4

    /// Stream x clear transfer error interrupt flag (x = 7..4)
    @ReadWrite(bits: 3..<4)
    var cteif4: CTEIF4

    /// Stream x clear direct mode error interrupt flag (x = 7..4)
    @ReadWrite(bits: 2..<3)
    var cdmeif4: CDMEIF4

    /// Stream x clear FIFO error interrupt flag (x = 7..4)
    @ReadWrite(bits: 0..<1)
    var cfeif4: CFEIF4
  }

  /// stream x configuration register
  @Register(bitWidth: 32)
  struct S0CR {
    /// Channel selection
    @ReadWrite(bits: 25..<28)
    var chsel: CHSEL

    /// Memory burst transfer configuration
    @ReadWrite(bits: 23..<25)
    var mburst: MBURST

    /// Peripheral burst transfer configuration
    @ReadWrite(bits: 21..<23)
    var pburst: PBURST

    /// Current target (only in double buffer mode)
    @ReadWrite(bits: 19..<20)
    var ct: CT

    /// Double buffer mode
    @ReadWrite(bits: 18..<19)
    var dbm: DBM

    /// Priority level
    @ReadWrite(bits: 16..<18)
    var pl: PL

    /// Peripheral increment offset size
    @ReadWrite(bits: 15..<16)
    var pincos: PINCOS

    /// Memory data size
    @ReadWrite(bits: 13..<15)
    var msize: MSIZE

    /// Peripheral data size
    @ReadWrite(bits: 11..<13)
    var psize: PSIZE

    /// Memory increment mode
    @ReadWrite(bits: 10..<11)
    var minc: MINC

    /// Peripheral increment mode
    @ReadWrite(bits: 9..<10)
    var pinc: PINC

    /// Circular mode
    @ReadWrite(bits: 8..<9)
    var circ: CIRC

    /// Data transfer direction
    @ReadWrite(bits: 6..<8)
    var dir: DIR

    /// Peripheral flow controller
    @ReadWrite(bits: 5..<6)
    var pfctrl: PFCTRL

    /// Transfer complete interrupt enable
    @ReadWrite(bits: 4..<5)
    var tcie: TCIE

    /// Half transfer interrupt enable
    @ReadWrite(bits: 3..<4)
    var htie: HTIE

    /// Transfer error interrupt enable
    @ReadWrite(bits: 2..<3)
    var teie: TEIE

    /// Direct mode error interrupt enable
    @ReadWrite(bits: 1..<2)
    var dmeie: DMEIE

    /// Stream enable / flag stream ready when read low
    @ReadWrite(bits: 0..<1)
    var en: EN
  }

  /// stream x number of data register
  @Register(bitWidth: 32)
  struct S0NDTR {
    /// Number of data items to transfer
    @ReadWrite(bits: 0..<16)
    var ndt: NDT
  }

  /// stream x peripheral address register
  @Register(bitWidth: 32)
  struct S0PAR {
    /// Peripheral address
    @ReadWrite(bits: 0..<32)
    var pa: PA
  }

  /// stream x memory 0 address register
  @Register(bitWidth: 32)
  struct S0M0AR {
    /// Memory 0 address
    @ReadWrite(bits: 0..<32)
    var m0a: M0A
  }

  /// stream x memory 1 address register
  @Register(bitWidth: 32)
  struct S0M1AR {
    /// Memory 1 address (used in case of Double buffer mode)
    @ReadWrite(bits: 0..<32)
    var m1a: M1A
  }

  /// stream x FIFO control register
  @Register(bitWidth: 32)
  struct S0FCR {
    /// FIFO error interrupt enable
    @ReadWrite(bits: 7..<8)
    var feie: FEIE

    /// FIFO status
    @ReadOnly(bits: 3..<6)
    var fs: FS

    /// Direct mode disable
    @ReadWrite(bits: 2..<3)
    var dmdis: DMDIS

    /// FIFO threshold selection
    @ReadWrite(bits: 0..<2)
    var fth: FTH
  }

  /// stream x configuration register
  @Register(bitWidth: 32)
  struct S1CR {
    /// Channel selection
    @ReadWrite(bits: 25..<28)
    var chsel: CHSEL

    /// Memory burst transfer configuration
    @ReadWrite(bits: 23..<25)
    var mburst: MBURST

    /// Peripheral burst transfer configuration
    @ReadWrite(bits: 21..<23)
    var pburst: PBURST

    /// ACK
    @ReadWrite(bits: 20..<21)
    var ack: ACK

    /// Current target (only in double buffer mode)
    @ReadWrite(bits: 19..<20)
    var ct: CT

    /// Double buffer mode
    @ReadWrite(bits: 18..<19)
    var dbm: DBM

    /// Priority level
    @ReadWrite(bits: 16..<18)
    var pl: PL

    /// Peripheral increment offset size
    @ReadWrite(bits: 15..<16)
    var pincos: PINCOS

    /// Memory data size
    @ReadWrite(bits: 13..<15)
    var msize: MSIZE

    /// Peripheral data size
    @ReadWrite(bits: 11..<13)
    var psize: PSIZE

    /// Memory increment mode
    @ReadWrite(bits: 10..<11)
    var minc: MINC

    /// Peripheral increment mode
    @ReadWrite(bits: 9..<10)
    var pinc: PINC

    /// Circular mode
    @ReadWrite(bits: 8..<9)
    var circ: CIRC

    /// Data transfer direction
    @ReadWrite(bits: 6..<8)
    var dir: DIR

    /// Peripheral flow controller
    @ReadWrite(bits: 5..<6)
    var pfctrl: PFCTRL

    /// Transfer complete interrupt enable
    @ReadWrite(bits: 4..<5)
    var tcie: TCIE

    /// Half transfer interrupt enable
    @ReadWrite(bits: 3..<4)
    var htie: HTIE

    /// Transfer error interrupt enable
    @ReadWrite(bits: 2..<3)
    var teie: TEIE

    /// Direct mode error interrupt enable
    @ReadWrite(bits: 1..<2)
    var dmeie: DMEIE

    /// Stream enable / flag stream ready when read low
    @ReadWrite(bits: 0..<1)
    var en: EN
  }

  /// stream x number of data register
  @Register(bitWidth: 32)
  struct S1NDTR {
    /// Number of data items to transfer
    @ReadWrite(bits: 0..<16)
    var ndt: NDT
  }

  /// stream x peripheral address register
  @Register(bitWidth: 32)
  struct S1PAR {
    /// Peripheral address
    @ReadWrite(bits: 0..<32)
    var pa: PA
  }

  /// stream x memory 0 address register
  @Register(bitWidth: 32)
  struct S1M0AR {
    /// Memory 0 address
    @ReadWrite(bits: 0..<32)
    var m0a: M0A
  }

  /// stream x memory 1 address register
  @Register(bitWidth: 32)
  struct S1M1AR {
    /// Memory 1 address (used in case of Double buffer mode)
    @ReadWrite(bits: 0..<32)
    var m1a: M1A
  }

  /// stream x FIFO control register
  @Register(bitWidth: 32)
  struct S1FCR {
    /// FIFO error interrupt enable
    @ReadWrite(bits: 7..<8)
    var feie: FEIE

    /// FIFO status
    @ReadOnly(bits: 3..<6)
    var fs: FS

    /// Direct mode disable
    @ReadWrite(bits: 2..<3)
    var dmdis: DMDIS

    /// FIFO threshold selection
    @ReadWrite(bits: 0..<2)
    var fth: FTH
  }

  /// stream x configuration register
  @Register(bitWidth: 32)
  struct S2CR {
    /// Channel selection
    @ReadWrite(bits: 25..<28)
    var chsel: CHSEL

    /// Memory burst transfer configuration
    @ReadWrite(bits: 23..<25)
    var mburst: MBURST

    /// Peripheral burst transfer configuration
    @ReadWrite(bits: 21..<23)
    var pburst: PBURST

    /// ACK
    @ReadWrite(bits: 20..<21)
    var ack: ACK

    /// Current target (only in double buffer mode)
    @ReadWrite(bits: 19..<20)
    var ct: CT

    /// Double buffer mode
    @ReadWrite(bits: 18..<19)
    var dbm: DBM

    /// Priority level
    @ReadWrite(bits: 16..<18)
    var pl: PL

    /// Peripheral increment offset size
    @ReadWrite(bits: 15..<16)
    var pincos: PINCOS

    /// Memory data size
    @ReadWrite(bits: 13..<15)
    var msize: MSIZE

    /// Peripheral data size
    @ReadWrite(bits: 11..<13)
    var psize: PSIZE

    /// Memory increment mode
    @ReadWrite(bits: 10..<11)
    var minc: MINC

    /// Peripheral increment mode
    @ReadWrite(bits: 9..<10)
    var pinc: PINC

    /// Circular mode
    @ReadWrite(bits: 8..<9)
    var circ: CIRC

    /// Data transfer direction
    @ReadWrite(bits: 6..<8)
    var dir: DIR

    /// Peripheral flow controller
    @ReadWrite(bits: 5..<6)
    var pfctrl: PFCTRL

    /// Transfer complete interrupt enable
    @ReadWrite(bits: 4..<5)
    var tcie: TCIE

    /// Half transfer interrupt enable
    @ReadWrite(bits: 3..<4)
    var htie: HTIE

    /// Transfer error interrupt enable
    @ReadWrite(bits: 2..<3)
    var teie: TEIE

    /// Direct mode error interrupt enable
    @ReadWrite(bits: 1..<2)
    var dmeie: DMEIE

    /// Stream enable / flag stream ready when read low
    @ReadWrite(bits: 0..<1)
    var en: EN
  }

  /// stream x number of data register
  @Register(bitWidth: 32)
  struct S2NDTR {
    /// Number of data items to transfer
    @ReadWrite(bits: 0..<16)
    var ndt: NDT
  }

  /// stream x peripheral address register
  @Register(bitWidth: 32)
  struct S2PAR {
    /// Peripheral address
    @ReadWrite(bits: 0..<32)
    var pa: PA
  }

  /// stream x memory 0 address register
  @Register(bitWidth: 32)
  struct S2M0AR {
    /// Memory 0 address
    @ReadWrite(bits: 0..<32)
    var m0a: M0A
  }

  /// stream x memory 1 address register
  @Register(bitWidth: 32)
  struct S2M1AR {
    /// Memory 1 address (used in case of Double buffer mode)
    @ReadWrite(bits: 0..<32)
    var m1a: M1A
  }

  /// stream x FIFO control register
  @Register(bitWidth: 32)
  struct S2FCR {
    /// FIFO error interrupt enable
    @ReadWrite(bits: 7..<8)
    var feie: FEIE

    /// FIFO status
    @ReadOnly(bits: 3..<6)
    var fs: FS

    /// Direct mode disable
    @ReadWrite(bits: 2..<3)
    var dmdis: DMDIS

    /// FIFO threshold selection
    @ReadWrite(bits: 0..<2)
    var fth: FTH
  }

  /// stream x configuration register
  @Register(bitWidth: 32)
  struct S3CR {
    /// Channel selection
    @ReadWrite(bits: 25..<28)
    var chsel: CHSEL

    /// Memory burst transfer configuration
    @ReadWrite(bits: 23..<25)
    var mburst: MBURST

    /// Peripheral burst transfer configuration
    @ReadWrite(bits: 21..<23)
    var pburst: PBURST

    /// ACK
    @ReadWrite(bits: 20..<21)
    var ack: ACK

    /// Current target (only in double buffer mode)
    @ReadWrite(bits: 19..<20)
    var ct: CT

    /// Double buffer mode
    @ReadWrite(bits: 18..<19)
    var dbm: DBM

    /// Priority level
    @ReadWrite(bits: 16..<18)
    var pl: PL

    /// Peripheral increment offset size
    @ReadWrite(bits: 15..<16)
    var pincos: PINCOS

    /// Memory data size
    @ReadWrite(bits: 13..<15)
    var msize: MSIZE

    /// Peripheral data size
    @ReadWrite(bits: 11..<13)
    var psize: PSIZE

    /// Memory increment mode
    @ReadWrite(bits: 10..<11)
    var minc: MINC

    /// Peripheral increment mode
    @ReadWrite(bits: 9..<10)
    var pinc: PINC

    /// Circular mode
    @ReadWrite(bits: 8..<9)
    var circ: CIRC

    /// Data transfer direction
    @ReadWrite(bits: 6..<8)
    var dir: DIR

    /// Peripheral flow controller
    @ReadWrite(bits: 5..<6)
    var pfctrl: PFCTRL

    /// Transfer complete interrupt enable
    @ReadWrite(bits: 4..<5)
    var tcie: TCIE

    /// Half transfer interrupt enable
    @ReadWrite(bits: 3..<4)
    var htie: HTIE

    /// Transfer error interrupt enable
    @ReadWrite(bits: 2..<3)
    var teie: TEIE

    /// Direct mode error interrupt enable
    @ReadWrite(bits: 1..<2)
    var dmeie: DMEIE

    /// Stream enable / flag stream ready when read low
    @ReadWrite(bits: 0..<1)
    var en: EN
  }

  /// stream x number of data register
  @Register(bitWidth: 32)
  struct S3NDTR {
    /// Number of data items to transfer
    @ReadWrite(bits: 0..<16)
    var ndt: NDT
  }

  /// stream x peripheral address register
  @Register(bitWidth: 32)
  struct S3PAR {
    /// Peripheral address
    @ReadWrite(bits: 0..<32)
    var pa: PA
  }

  /// stream x memory 0 address register
  @Register(bitWidth: 32)
  struct S3M0AR {
    /// Memory 0 address
    @ReadWrite(bits: 0..<32)
    var m0a: M0A
  }

  /// stream x memory 1 address register
  @Register(bitWidth: 32)
  struct S3M1AR {
    /// Memory 1 address (used in case of Double buffer mode)
    @ReadWrite(bits: 0..<32)
    var m1a: M1A
  }

  /// stream x FIFO control register
  @Register(bitWidth: 32)
  struct S3FCR {
    /// FIFO error interrupt enable
    @ReadWrite(bits: 7..<8)
    var feie: FEIE

    /// FIFO status
    @ReadOnly(bits: 3..<6)
    var fs: FS

    /// Direct mode disable
    @ReadWrite(bits: 2..<3)
    var dmdis: DMDIS

    /// FIFO threshold selection
    @ReadWrite(bits: 0..<2)
    var fth: FTH
  }

  /// stream x configuration register
  @Register(bitWidth: 32)
  struct S4CR {
    /// Channel selection
    @ReadWrite(bits: 25..<28)
    var chsel: CHSEL

    /// Memory burst transfer configuration
    @ReadWrite(bits: 23..<25)
    var mburst: MBURST

    /// Peripheral burst transfer configuration
    @ReadWrite(bits: 21..<23)
    var pburst: PBURST

    /// ACK
    @ReadWrite(bits: 20..<21)
    var ack: ACK

    /// Current target (only in double buffer mode)
    @ReadWrite(bits: 19..<20)
    var ct: CT

    /// Double buffer mode
    @ReadWrite(bits: 18..<19)
    var dbm: DBM

    /// Priority level
    @ReadWrite(bits: 16..<18)
    var pl: PL

    /// Peripheral increment offset size
    @ReadWrite(bits: 15..<16)
    var pincos: PINCOS

    /// Memory data size
    @ReadWrite(bits: 13..<15)
    var msize: MSIZE

    /// Peripheral data size
    @ReadWrite(bits: 11..<13)
    var psize: PSIZE

    /// Memory increment mode
    @ReadWrite(bits: 10..<11)
    var minc: MINC

    /// Peripheral increment mode
    @ReadWrite(bits: 9..<10)
    var pinc: PINC

    /// Circular mode
    @ReadWrite(bits: 8..<9)
    var circ: CIRC

    /// Data transfer direction
    @ReadWrite(bits: 6..<8)
    var dir: DIR

    /// Peripheral flow controller
    @ReadWrite(bits: 5..<6)
    var pfctrl: PFCTRL

    /// Transfer complete interrupt enable
    @ReadWrite(bits: 4..<5)
    var tcie: TCIE

    /// Half transfer interrupt enable
    @ReadWrite(bits: 3..<4)
    var htie: HTIE

    /// Transfer error interrupt enable
    @ReadWrite(bits: 2..<3)
    var teie: TEIE

    /// Direct mode error interrupt enable
    @ReadWrite(bits: 1..<2)
    var dmeie: DMEIE

    /// Stream enable / flag stream ready when read low
    @ReadWrite(bits: 0..<1)
    var en: EN
  }

  /// stream x number of data register
  @Register(bitWidth: 32)
  struct S4NDTR {
    /// Number of data items to transfer
    @ReadWrite(bits: 0..<16)
    var ndt: NDT
  }

  /// stream x peripheral address register
  @Register(bitWidth: 32)
  struct S4PAR {
    /// Peripheral address
    @ReadWrite(bits: 0..<32)
    var pa: PA
  }

  /// stream x memory 0 address register
  @Register(bitWidth: 32)
  struct S4M0AR {
    /// Memory 0 address
    @ReadWrite(bits: 0..<32)
    var m0a: M0A
  }

  /// stream x memory 1 address register
  @Register(bitWidth: 32)
  struct S4M1AR {
    /// Memory 1 address (used in case of Double buffer mode)
    @ReadWrite(bits: 0..<32)
    var m1a: M1A
  }

  /// stream x FIFO control register
  @Register(bitWidth: 32)
  struct S4FCR {
    /// FIFO error interrupt enable
    @ReadWrite(bits: 7..<8)
    var feie: FEIE

    /// FIFO status
    @ReadOnly(bits: 3..<6)
    var fs: FS

    /// Direct mode disable
    @ReadWrite(bits: 2..<3)
    var dmdis: DMDIS

    /// FIFO threshold selection
    @ReadWrite(bits: 0..<2)
    var fth: FTH
  }

  /// stream x configuration register
  @Register(bitWidth: 32)
  struct S5CR {
    /// Channel selection
    @ReadWrite(bits: 25..<28)
    var chsel: CHSEL

    /// Memory burst transfer configuration
    @ReadWrite(bits: 23..<25)
    var mburst: MBURST

    /// Peripheral burst transfer configuration
    @ReadWrite(bits: 21..<23)
    var pburst: PBURST

    /// ACK
    @ReadWrite(bits: 20..<21)
    var ack: ACK

    /// Current target (only in double buffer mode)
    @ReadWrite(bits: 19..<20)
    var ct: CT

    /// Double buffer mode
    @ReadWrite(bits: 18..<19)
    var dbm: DBM

    /// Priority level
    @ReadWrite(bits: 16..<18)
    var pl: PL

    /// Peripheral increment offset size
    @ReadWrite(bits: 15..<16)
    var pincos: PINCOS

    /// Memory data size
    @ReadWrite(bits: 13..<15)
    var msize: MSIZE

    /// Peripheral data size
    @ReadWrite(bits: 11..<13)
    var psize: PSIZE

    /// Memory increment mode
    @ReadWrite(bits: 10..<11)
    var minc: MINC

    /// Peripheral increment mode
    @ReadWrite(bits: 9..<10)
    var pinc: PINC

    /// Circular mode
    @ReadWrite(bits: 8..<9)
    var circ: CIRC

    /// Data transfer direction
    @ReadWrite(bits: 6..<8)
    var dir: DIR

    /// Peripheral flow controller
    @ReadWrite(bits: 5..<6)
    var pfctrl: PFCTRL

    /// Transfer complete interrupt enable
    @ReadWrite(bits: 4..<5)
    var tcie: TCIE

    /// Half transfer interrupt enable
    @ReadWrite(bits: 3..<4)
    var htie: HTIE

    /// Transfer error interrupt enable
    @ReadWrite(bits: 2..<3)
    var teie: TEIE

    /// Direct mode error interrupt enable
    @ReadWrite(bits: 1..<2)
    var dmeie: DMEIE

    /// Stream enable / flag stream ready when read low
    @ReadWrite(bits: 0..<1)
    var en: EN
  }

  /// stream x number of data register
  @Register(bitWidth: 32)
  struct S5NDTR {
    /// Number of data items to transfer
    @ReadWrite(bits: 0..<16)
    var ndt: NDT
  }

  /// stream x peripheral address register
  @Register(bitWidth: 32)
  struct S5PAR {
    /// Peripheral address
    @ReadWrite(bits: 0..<32)
    var pa: PA
  }

  /// stream x memory 0 address register
  @Register(bitWidth: 32)
  struct S5M0AR {
    /// Memory 0 address
    @ReadWrite(bits: 0..<32)
    var m0a: M0A
  }

  /// stream x memory 1 address register
  @Register(bitWidth: 32)
  struct S5M1AR {
    /// Memory 1 address (used in case of Double buffer mode)
    @ReadWrite(bits: 0..<32)
    var m1a: M1A
  }

  /// stream x FIFO control register
  @Register(bitWidth: 32)
  struct S5FCR {
    /// FIFO error interrupt enable
    @ReadWrite(bits: 7..<8)
    var feie: FEIE

    /// FIFO status
    @ReadOnly(bits: 3..<6)
    var fs: FS

    /// Direct mode disable
    @ReadWrite(bits: 2..<3)
    var dmdis: DMDIS

    /// FIFO threshold selection
    @ReadWrite(bits: 0..<2)
    var fth: FTH
  }

  /// stream x configuration register
  @Register(bitWidth: 32)
  struct S6CR {
    /// Channel selection
    @ReadWrite(bits: 25..<28)
    var chsel: CHSEL

    /// Memory burst transfer configuration
    @ReadWrite(bits: 23..<25)
    var mburst: MBURST

    /// Peripheral burst transfer configuration
    @ReadWrite(bits: 21..<23)
    var pburst: PBURST

    /// ACK
    @ReadWrite(bits: 20..<21)
    var ack: ACK

    /// Current target (only in double buffer mode)
    @ReadWrite(bits: 19..<20)
    var ct: CT

    /// Double buffer mode
    @ReadWrite(bits: 18..<19)
    var dbm: DBM

    /// Priority level
    @ReadWrite(bits: 16..<18)
    var pl: PL

    /// Peripheral increment offset size
    @ReadWrite(bits: 15..<16)
    var pincos: PINCOS

    /// Memory data size
    @ReadWrite(bits: 13..<15)
    var msize: MSIZE

    /// Peripheral data size
    @ReadWrite(bits: 11..<13)
    var psize: PSIZE

    /// Memory increment mode
    @ReadWrite(bits: 10..<11)
    var minc: MINC

    /// Peripheral increment mode
    @ReadWrite(bits: 9..<10)
    var pinc: PINC

    /// Circular mode
    @ReadWrite(bits: 8..<9)
    var circ: CIRC

    /// Data transfer direction
    @ReadWrite(bits: 6..<8)
    var dir: DIR

    /// Peripheral flow controller
    @ReadWrite(bits: 5..<6)
    var pfctrl: PFCTRL

    /// Transfer complete interrupt enable
    @ReadWrite(bits: 4..<5)
    var tcie: TCIE

    /// Half transfer interrupt enable
    @ReadWrite(bits: 3..<4)
    var htie: HTIE

    /// Transfer error interrupt enable
    @ReadWrite(bits: 2..<3)
    var teie: TEIE

    /// Direct mode error interrupt enable
    @ReadWrite(bits: 1..<2)
    var dmeie: DMEIE

    /// Stream enable / flag stream ready when read low
    @ReadWrite(bits: 0..<1)
    var en: EN
  }

  /// stream x number of data register
  @Register(bitWidth: 32)
  struct S6NDTR {
    /// Number of data items to transfer
    @ReadWrite(bits: 0..<16)
    var ndt: NDT
  }

  /// stream x peripheral address register
  @Register(bitWidth: 32)
  struct S6PAR {
    /// Peripheral address
    @ReadWrite(bits: 0..<32)
    var pa: PA
  }

  /// stream x memory 0 address register
  @Register(bitWidth: 32)
  struct S6M0AR {
    /// Memory 0 address
    @ReadWrite(bits: 0..<32)
    var m0a: M0A
  }

  /// stream x memory 1 address register
  @Register(bitWidth: 32)
  struct S6M1AR {
    /// Memory 1 address (used in case of Double buffer mode)
    @ReadWrite(bits: 0..<32)
    var m1a: M1A
  }

  /// stream x FIFO control register
  @Register(bitWidth: 32)
  struct S6FCR {
    /// FIFO error interrupt enable
    @ReadWrite(bits: 7..<8)
    var feie: FEIE

    /// FIFO status
    @ReadOnly(bits: 3..<6)
    var fs: FS

    /// Direct mode disable
    @ReadWrite(bits: 2..<3)
    var dmdis: DMDIS

    /// FIFO threshold selection
    @ReadWrite(bits: 0..<2)
    var fth: FTH
  }

  /// stream x configuration register
  @Register(bitWidth: 32)
  struct S7CR {
    /// Channel selection
    @ReadWrite(bits: 25..<28)
    var chsel: CHSEL

    /// Memory burst transfer configuration
    @ReadWrite(bits: 23..<25)
    var mburst: MBURST

    /// Peripheral burst transfer configuration
    @ReadWrite(bits: 21..<23)
    var pburst: PBURST

    /// ACK
    @ReadWrite(bits: 20..<21)
    var ack: ACK

    /// Current target (only in double buffer mode)
    @ReadWrite(bits: 19..<20)
    var ct: CT

    /// Double buffer mode
    @ReadWrite(bits: 18..<19)
    var dbm: DBM

    /// Priority level
    @ReadWrite(bits: 16..<18)
    var pl: PL

    /// Peripheral increment offset size
    @ReadWrite(bits: 15..<16)
    var pincos: PINCOS

    /// Memory data size
    @ReadWrite(bits: 13..<15)
    var msize: MSIZE

    /// Peripheral data size
    @ReadWrite(bits: 11..<13)
    var psize: PSIZE

    /// Memory increment mode
    @ReadWrite(bits: 10..<11)
    var minc: MINC

    /// Peripheral increment mode
    @ReadWrite(bits: 9..<10)
    var pinc: PINC

    /// Circular mode
    @ReadWrite(bits: 8..<9)
    var circ: CIRC

    /// Data transfer direction
    @ReadWrite(bits: 6..<8)
    var dir: DIR

    /// Peripheral flow controller
    @ReadWrite(bits: 5..<6)
    var pfctrl: PFCTRL

    /// Transfer complete interrupt enable
    @ReadWrite(bits: 4..<5)
    var tcie: TCIE

    /// Half transfer interrupt enable
    @ReadWrite(bits: 3..<4)
    var htie: HTIE

    /// Transfer error interrupt enable
    @ReadWrite(bits: 2..<3)
    var teie: TEIE

    /// Direct mode error interrupt enable
    @ReadWrite(bits: 1..<2)
    var dmeie: DMEIE

    /// Stream enable / flag stream ready when read low
    @ReadWrite(bits: 0..<1)
    var en: EN
  }

  /// stream x number of data register
  @Register(bitWidth: 32)
  struct S7NDTR {
    /// Number of data items to transfer
    @ReadWrite(bits: 0..<16)
    var ndt: NDT
  }

  /// stream x peripheral address register
  @Register(bitWidth: 32)
  struct S7PAR {
    /// Peripheral address
    @ReadWrite(bits: 0..<32)
    var pa: PA
  }

  /// stream x memory 0 address register
  @Register(bitWidth: 32)
  struct S7M0AR {
    /// Memory 0 address
    @ReadWrite(bits: 0..<32)
    var m0a: M0A
  }

  /// stream x memory 1 address register
  @Register(bitWidth: 32)
  struct S7M1AR {
    /// Memory 1 address (used in case of Double buffer mode)
    @ReadWrite(bits: 0..<32)
    var m1a: M1A
  }

  /// stream x FIFO control register
  @Register(bitWidth: 32)
  struct S7FCR {
    /// FIFO error interrupt enable
    @ReadWrite(bits: 7..<8)
    var feie: FEIE

    /// FIFO status
    @ReadOnly(bits: 3..<6)
    var fs: FS

    /// Direct mode disable
    @ReadWrite(bits: 2..<3)
    var dmdis: DMDIS

    /// FIFO threshold selection
    @ReadWrite(bits: 0..<2)
    var fth: FTH
  }
}
