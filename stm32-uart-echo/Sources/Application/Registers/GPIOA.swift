// Generated by svd2swift.

import MMIO

/// General-purpose I/Os
@RegisterBlock
struct GPIOA {
  /// GPIO port mode register
  @RegisterBlock(offset: 0x0)
  var moder: Register<MODER>

  /// GPIO port output type register
  @RegisterBlock(offset: 0x4)
  var otyper: Register<OTYPER>

  /// GPIO port output speed register
  @RegisterBlock(offset: 0x8)
  var ospeedr: Register<OSPEEDR>

  /// GPIO port pull-up/pull-down register
  @RegisterBlock(offset: 0xc)
  var pupdr: Register<PUPDR>

  /// GPIO port input data register
  @RegisterBlock(offset: 0x10)
  var idr: Register<IDR>

  /// GPIO port output data register
  @RegisterBlock(offset: 0x14)
  var odr: Register<ODR>

  /// GPIO port bit set/reset register
  @RegisterBlock(offset: 0x18)
  var bsrr: Register<BSRR>

  /// GPIO port configuration lock register
  @RegisterBlock(offset: 0x1c)
  var lckr: Register<LCKR>

  /// GPIO alternate function low register
  @RegisterBlock(offset: 0x20)
  var afrl: Register<AFRL>

  /// GPIO alternate function high register
  @RegisterBlock(offset: 0x24)
  var afrh: Register<AFRH>

  /// GPIO port bit reset register
  @RegisterBlock(offset: 0x28)
  var brr: Register<BRR>
}

extension GPIOA {
  /// GPIO port mode register
  @Register(bitWidth: 32)
  struct MODER {
    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 30..<32)
    var moder15: MODER15

    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 28..<30)
    var moder14: MODER14

    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 26..<28)
    var moder13: MODER13

    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 24..<26)
    var moder12: MODER12

    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 22..<24)
    var moder11: MODER11

    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 20..<22)
    var moder10: MODER10

    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 18..<20)
    var moder9: MODER9

    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 16..<18)
    var moder8: MODER8

    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 14..<16)
    var moder7: MODER7

    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 12..<14)
    var moder6: MODER6

    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 10..<12)
    var moder5: MODER5

    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 8..<10)
    var moder4: MODER4

    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 6..<8)
    var moder3: MODER3

    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 4..<6)
    var moder2: MODER2

    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 2..<4)
    var moder1: MODER1

    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 0..<2)
    var moder0: MODER0
  }

  /// GPIO port output type register
  @Register(bitWidth: 32)
  struct OTYPER {
    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 15..<16)
    var ot15: OT15

    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 14..<15)
    var ot14: OT14

    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 13..<14)
    var ot13: OT13

    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 12..<13)
    var ot12: OT12

    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 11..<12)
    var ot11: OT11

    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 10..<11)
    var ot10: OT10

    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 9..<10)
    var ot9: OT9

    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 8..<9)
    var ot8: OT8

    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 7..<8)
    var ot7: OT7

    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 6..<7)
    var ot6: OT6

    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 5..<6)
    var ot5: OT5

    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 4..<5)
    var ot4: OT4

    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 3..<4)
    var ot3: OT3

    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 2..<3)
    var ot2: OT2

    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 1..<2)
    var ot1: OT1

    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 0..<1)
    var ot0: OT0
  }

  /// GPIO port output speed register
  @Register(bitWidth: 32)
  struct OSPEEDR {
    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 30..<32)
    var ospeedr15: OSPEEDR15

    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 28..<30)
    var ospeedr14: OSPEEDR14

    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 26..<28)
    var ospeedr13: OSPEEDR13

    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 24..<26)
    var ospeedr12: OSPEEDR12

    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 22..<24)
    var ospeedr11: OSPEEDR11

    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 20..<22)
    var ospeedr10: OSPEEDR10

    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 18..<20)
    var ospeedr9: OSPEEDR9

    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 16..<18)
    var ospeedr8: OSPEEDR8

    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 14..<16)
    var ospeedr7: OSPEEDR7

    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 12..<14)
    var ospeedr6: OSPEEDR6

    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 10..<12)
    var ospeedr5: OSPEEDR5

    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 8..<10)
    var ospeedr4: OSPEEDR4

    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 6..<8)
    var ospeedr3: OSPEEDR3

    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 4..<6)
    var ospeedr2: OSPEEDR2

    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 2..<4)
    var ospeedr1: OSPEEDR1

    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 0..<2)
    var ospeedr0: OSPEEDR0
  }

  /// GPIO port pull-up/pull-down register
  @Register(bitWidth: 32)
  struct PUPDR {
    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 30..<32)
    var pupdr15: PUPDR15

    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 28..<30)
    var pupdr14: PUPDR14

    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 26..<28)
    var pupdr13: PUPDR13

    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 24..<26)
    var pupdr12: PUPDR12

    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 22..<24)
    var pupdr11: PUPDR11

    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 20..<22)
    var pupdr10: PUPDR10

    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 18..<20)
    var pupdr9: PUPDR9

    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 16..<18)
    var pupdr8: PUPDR8

    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 14..<16)
    var pupdr7: PUPDR7

    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 12..<14)
    var pupdr6: PUPDR6

    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 10..<12)
    var pupdr5: PUPDR5

    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 8..<10)
    var pupdr4: PUPDR4

    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 6..<8)
    var pupdr3: PUPDR3

    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 4..<6)
    var pupdr2: PUPDR2

    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 2..<4)
    var pupdr1: PUPDR1

    /// Port x configuration bits (y = 0..15)
    @ReadWrite(bits: 0..<2)
    var pupdr0: PUPDR0
  }

  /// GPIO port input data register
  @Register(bitWidth: 32)
  struct IDR {
    /// Port input data (y = 0..15)
    @ReadOnly(bits: 15..<16)
    var idr15: IDR15

    /// Port input data (y = 0..15)
    @ReadOnly(bits: 14..<15)
    var idr14: IDR14

    /// Port input data (y = 0..15)
    @ReadOnly(bits: 13..<14)
    var idr13: IDR13

    /// Port input data (y = 0..15)
    @ReadOnly(bits: 12..<13)
    var idr12: IDR12

    /// Port input data (y = 0..15)
    @ReadOnly(bits: 11..<12)
    var idr11: IDR11

    /// Port input data (y = 0..15)
    @ReadOnly(bits: 10..<11)
    var idr10: IDR10

    /// Port input data (y = 0..15)
    @ReadOnly(bits: 9..<10)
    var idr9: IDR9

    /// Port input data (y = 0..15)
    @ReadOnly(bits: 8..<9)
    var idr8: IDR8

    /// Port input data (y = 0..15)
    @ReadOnly(bits: 7..<8)
    var idr7: IDR7

    /// Port input data (y = 0..15)
    @ReadOnly(bits: 6..<7)
    var idr6: IDR6

    /// Port input data (y = 0..15)
    @ReadOnly(bits: 5..<6)
    var idr5: IDR5

    /// Port input data (y = 0..15)
    @ReadOnly(bits: 4..<5)
    var idr4: IDR4

    /// Port input data (y = 0..15)
    @ReadOnly(bits: 3..<4)
    var idr3: IDR3

    /// Port input data (y = 0..15)
    @ReadOnly(bits: 2..<3)
    var idr2: IDR2

    /// Port input data (y = 0..15)
    @ReadOnly(bits: 1..<2)
    var idr1: IDR1

    /// Port input data (y = 0..15)
    @ReadOnly(bits: 0..<1)
    var idr0: IDR0
  }

  /// GPIO port output data register
  @Register(bitWidth: 32)
  struct ODR {
    /// Port output data (y = 0..15)
    @ReadWrite(bits: 15..<16)
    var odr15: ODR15

    /// Port output data (y = 0..15)
    @ReadWrite(bits: 14..<15)
    var odr14: ODR14

    /// Port output data (y = 0..15)
    @ReadWrite(bits: 13..<14)
    var odr13: ODR13

    /// Port output data (y = 0..15)
    @ReadWrite(bits: 12..<13)
    var odr12: ODR12

    /// Port output data (y = 0..15)
    @ReadWrite(bits: 11..<12)
    var odr11: ODR11

    /// Port output data (y = 0..15)
    @ReadWrite(bits: 10..<11)
    var odr10: ODR10

    /// Port output data (y = 0..15)
    @ReadWrite(bits: 9..<10)
    var odr9: ODR9

    /// Port output data (y = 0..15)
    @ReadWrite(bits: 8..<9)
    var odr8: ODR8

    /// Port output data (y = 0..15)
    @ReadWrite(bits: 7..<8)
    var odr7: ODR7

    /// Port output data (y = 0..15)
    @ReadWrite(bits: 6..<7)
    var odr6: ODR6

    /// Port output data (y = 0..15)
    @ReadWrite(bits: 5..<6)
    var odr5: ODR5

    /// Port output data (y = 0..15)
    @ReadWrite(bits: 4..<5)
    var odr4: ODR4

    /// Port output data (y = 0..15)
    @ReadWrite(bits: 3..<4)
    var odr3: ODR3

    /// Port output data (y = 0..15)
    @ReadWrite(bits: 2..<3)
    var odr2: ODR2

    /// Port output data (y = 0..15)
    @ReadWrite(bits: 1..<2)
    var odr1: ODR1

    /// Port output data (y = 0..15)
    @ReadWrite(bits: 0..<1)
    var odr0: ODR0
  }

  /// GPIO port bit set/reset register
  @Register(bitWidth: 32)
  struct BSRR {
    /// Port x reset bit y (y = 0..15)
    @WriteOnly(bits: 31..<32)
    var br15: BR15

    /// Port x reset bit y (y = 0..15)
    @WriteOnly(bits: 30..<31)
    var br14: BR14

    /// Port x reset bit y (y = 0..15)
    @WriteOnly(bits: 29..<30)
    var br13: BR13

    /// Port x reset bit y (y = 0..15)
    @WriteOnly(bits: 28..<29)
    var br12: BR12

    /// Port x reset bit y (y = 0..15)
    @WriteOnly(bits: 27..<28)
    var br11: BR11

    /// Port x reset bit y (y = 0..15)
    @WriteOnly(bits: 26..<27)
    var br10: BR10

    /// Port x reset bit y (y = 0..15)
    @WriteOnly(bits: 25..<26)
    var br9: BR9

    /// Port x reset bit y (y = 0..15)
    @WriteOnly(bits: 24..<25)
    var br8: BR8

    /// Port x reset bit y (y = 0..15)
    @WriteOnly(bits: 23..<24)
    var br7: BR7

    /// Port x reset bit y (y = 0..15)
    @WriteOnly(bits: 22..<23)
    var br6: BR6

    /// Port x reset bit y (y = 0..15)
    @WriteOnly(bits: 21..<22)
    var br5: BR5

    /// Port x reset bit y (y = 0..15)
    @WriteOnly(bits: 20..<21)
    var br4: BR4

    /// Port x reset bit y (y = 0..15)
    @WriteOnly(bits: 19..<20)
    var br3: BR3

    /// Port x reset bit y (y = 0..15)
    @WriteOnly(bits: 18..<19)
    var br2: BR2

    /// Port x reset bit y (y = 0..15)
    @WriteOnly(bits: 17..<18)
    var br1: BR1

    /// Port x set bit y (y= 0..15)
    @WriteOnly(bits: 16..<17)
    var br0: BR0

    /// Port x set bit y (y= 0..15)
    @WriteOnly(bits: 15..<16)
    var bs15: BS15

    /// Port x set bit y (y= 0..15)
    @WriteOnly(bits: 14..<15)
    var bs14: BS14

    /// Port x set bit y (y= 0..15)
    @WriteOnly(bits: 13..<14)
    var bs13: BS13

    /// Port x set bit y (y= 0..15)
    @WriteOnly(bits: 12..<13)
    var bs12: BS12

    /// Port x set bit y (y= 0..15)
    @WriteOnly(bits: 11..<12)
    var bs11: BS11

    /// Port x set bit y (y= 0..15)
    @WriteOnly(bits: 10..<11)
    var bs10: BS10

    /// Port x set bit y (y= 0..15)
    @WriteOnly(bits: 9..<10)
    var bs9: BS9

    /// Port x set bit y (y= 0..15)
    @WriteOnly(bits: 8..<9)
    var bs8: BS8

    /// Port x set bit y (y= 0..15)
    @WriteOnly(bits: 7..<8)
    var bs7: BS7

    /// Port x set bit y (y= 0..15)
    @WriteOnly(bits: 6..<7)
    var bs6: BS6

    /// Port x set bit y (y= 0..15)
    @WriteOnly(bits: 5..<6)
    var bs5: BS5

    /// Port x set bit y (y= 0..15)
    @WriteOnly(bits: 4..<5)
    var bs4: BS4

    /// Port x set bit y (y= 0..15)
    @WriteOnly(bits: 3..<4)
    var bs3: BS3

    /// Port x set bit y (y= 0..15)
    @WriteOnly(bits: 2..<3)
    var bs2: BS2

    /// Port x set bit y (y= 0..15)
    @WriteOnly(bits: 1..<2)
    var bs1: BS1

    /// Port x set bit y (y= 0..15)
    @WriteOnly(bits: 0..<1)
    var bs0: BS0
  }

  /// GPIO port configuration lock register
  @Register(bitWidth: 32)
  struct LCKR {
    /// Port x lock bit y (y= 0..15)
    @ReadWrite(bits: 16..<17)
    var lckk: LCKK

    /// Port x lock bit y (y= 0..15)
    @ReadWrite(bits: 15..<16)
    var lck15: LCK15

    /// Port x lock bit y (y= 0..15)
    @ReadWrite(bits: 14..<15)
    var lck14: LCK14

    /// Port x lock bit y (y= 0..15)
    @ReadWrite(bits: 13..<14)
    var lck13: LCK13

    /// Port x lock bit y (y= 0..15)
    @ReadWrite(bits: 12..<13)
    var lck12: LCK12

    /// Port x lock bit y (y= 0..15)
    @ReadWrite(bits: 11..<12)
    var lck11: LCK11

    /// Port x lock bit y (y= 0..15)
    @ReadWrite(bits: 10..<11)
    var lck10: LCK10

    /// Port x lock bit y (y= 0..15)
    @ReadWrite(bits: 9..<10)
    var lck9: LCK9

    /// Port x lock bit y (y= 0..15)
    @ReadWrite(bits: 8..<9)
    var lck8: LCK8

    /// Port x lock bit y (y= 0..15)
    @ReadWrite(bits: 7..<8)
    var lck7: LCK7

    /// Port x lock bit y (y= 0..15)
    @ReadWrite(bits: 6..<7)
    var lck6: LCK6

    /// Port x lock bit y (y= 0..15)
    @ReadWrite(bits: 5..<6)
    var lck5: LCK5

    /// Port x lock bit y (y= 0..15)
    @ReadWrite(bits: 4..<5)
    var lck4: LCK4

    /// Port x lock bit y (y= 0..15)
    @ReadWrite(bits: 3..<4)
    var lck3: LCK3

    /// Port x lock bit y (y= 0..15)
    @ReadWrite(bits: 2..<3)
    var lck2: LCK2

    /// Port x lock bit y (y= 0..15)
    @ReadWrite(bits: 1..<2)
    var lck1: LCK1

    /// Port x lock bit y (y= 0..15)
    @ReadWrite(bits: 0..<1)
    var lck0: LCK0
  }

  /// GPIO alternate function low register
  @Register(bitWidth: 32)
  struct AFRL {
    /// Alternate function selection for port x bit y (y = 0..7)
    @ReadWrite(bits: 28..<32)
    var afrl7: AFRL7

    /// Alternate function selection for port x bit y (y = 0..7)
    @ReadWrite(bits: 24..<28)
    var afrl6: AFRL6

    /// Alternate function selection for port x bit y (y = 0..7)
    @ReadWrite(bits: 20..<24)
    var afrl5: AFRL5

    /// Alternate function selection for port x bit y (y = 0..7)
    @ReadWrite(bits: 16..<20)
    var afrl4: AFRL4

    /// Alternate function selection for port x bit y (y = 0..7)
    @ReadWrite(bits: 12..<16)
    var afrl3: AFRL3

    /// Alternate function selection for port x bit y (y = 0..7)
    @ReadWrite(bits: 8..<12)
    var afrl2: AFRL2

    /// Alternate function selection for port x bit y (y = 0..7)
    @ReadWrite(bits: 4..<8)
    var afrl1: AFRL1

    /// Alternate function selection for port x bit y (y = 0..7)
    @ReadWrite(bits: 0..<4)
    var afrl0: AFRL0
  }

  /// GPIO alternate function high register
  @Register(bitWidth: 32)
  struct AFRH {
    /// Alternate function selection for port x bit y (y = 8..15)
    @ReadWrite(bits: 28..<32)
    var afrh15: AFRH15

    /// Alternate function selection for port x bit y (y = 8..15)
    @ReadWrite(bits: 24..<28)
    var afrh14: AFRH14

    /// Alternate function selection for port x bit y (y = 8..15)
    @ReadWrite(bits: 20..<24)
    var afrh13: AFRH13

    /// Alternate function selection for port x bit y (y = 8..15)
    @ReadWrite(bits: 16..<20)
    var afrh12: AFRH12

    /// Alternate function selection for port x bit y (y = 8..15)
    @ReadWrite(bits: 12..<16)
    var afrh11: AFRH11

    /// Alternate function selection for port x bit y (y = 8..15)
    @ReadWrite(bits: 8..<12)
    var afrh10: AFRH10

    /// Alternate function selection for port x bit y (y = 8..15)
    @ReadWrite(bits: 4..<8)
    var afrh9: AFRH9

    /// Alternate function selection for port x bit y (y = 8..15)
    @ReadWrite(bits: 0..<4)
    var afrh8: AFRH8
  }

  /// GPIO port bit reset register
  @Register(bitWidth: 32)
  struct BRR {
    /// Port A Reset bit 0
    @ReadWrite(bits: 0..<1)
    var br0: BR0

    /// Port A Reset bit 1
    @ReadWrite(bits: 1..<2)
    var br1: BR1

    /// Port A Reset bit 2
    @ReadWrite(bits: 2..<3)
    var br2: BR2

    /// Port A Reset bit 3
    @ReadWrite(bits: 3..<4)
    var br3: BR3

    /// Port A Reset bit 4
    @ReadWrite(bits: 4..<5)
    var br4: BR4

    /// Port A Reset bit 5
    @ReadWrite(bits: 5..<6)
    var br5: BR5

    /// Port A Reset bit 6
    @ReadWrite(bits: 6..<7)
    var br6: BR6

    /// Port A Reset bit 7
    @ReadWrite(bits: 7..<8)
    var br7: BR7

    /// Port A Reset bit 8
    @ReadWrite(bits: 8..<9)
    var br8: BR8

    /// Port A Reset bit 9
    @ReadWrite(bits: 9..<10)
    var br9: BR9

    /// Port A Reset bit 10
    @ReadWrite(bits: 10..<11)
    var br10: BR10

    /// Port A Reset bit 11
    @ReadWrite(bits: 11..<12)
    var br11: BR11

    /// Port A Reset bit 12
    @ReadWrite(bits: 12..<13)
    var br12: BR12

    /// Port A Reset bit 13
    @ReadWrite(bits: 13..<14)
    var br13: BR13

    /// Port A Reset bit 14
    @ReadWrite(bits: 14..<15)
    var br14: BR14

    /// Port A Reset bit 15
    @ReadWrite(bits: 15..<16)
    var br15: BR15
  }
}
