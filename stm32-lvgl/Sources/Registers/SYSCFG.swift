// Generated by svd2swift.

import MMIO

/// System configuration controller
@RegisterBlock
public struct SYSCFG {
    /// memory remap register
    @RegisterBlock(offset: 0x0)
    public var memrmp: Register<MEMRMP>

    /// peripheral mode configuration register
    @RegisterBlock(offset: 0x4)
    public var pmc: Register<PMC>

    /// external interrupt configuration register 1
    @RegisterBlock(offset: 0x8)
    public var exticr1: Register<EXTICR1>

    /// external interrupt configuration register 2
    @RegisterBlock(offset: 0xc)
    public var exticr2: Register<EXTICR2>

    /// external interrupt configuration register 3
    @RegisterBlock(offset: 0x10)
    public var exticr3: Register<EXTICR3>

    /// external interrupt configuration register 4
    @RegisterBlock(offset: 0x14)
    public var exticr4: Register<EXTICR4>

    /// Compensation cell control register
    @RegisterBlock(offset: 0x20)
    public var cmpcr: Register<CMPCR>
}

extension SYSCFG {
    /// memory remap register
    @Register(bitWidth: 32)
    public struct MEMRMP {
        /// Memory mapping selection
        @ReadWrite(bits: 0..<1)
        public var mem_boot: MEM_BOOT

        /// FMC memory mapping swap
        @ReadWrite(bits: 10..<12)
        public var swp_fmc: SWP_FMC
    }

    /// peripheral mode configuration register
    @Register(bitWidth: 32)
    public struct PMC {
        /// Ethernet PHY interface selection
        @ReadWrite(bits: 23..<24)
        public var mii_rmii_sel: MII_RMII_SEL

        /// ADC1DC2
        @ReadWrite(bits: 16..<17)
        public var adc1dc2: ADC1DC2

        /// ADC2DC2
        @ReadWrite(bits: 17..<18)
        public var adc2dc2: ADC2DC2

        /// ADC3DC2
        @ReadWrite(bits: 18..<19)
        public var adc3dc2: ADC3DC2
    }

    /// external interrupt configuration register 1
    @Register(bitWidth: 32)
    public struct EXTICR1 {
        /// EXTI x configuration (x = 0 to 3)
        @ReadWrite(bits: 12..<16)
        public var exti3: EXTI3

        /// EXTI x configuration (x = 0 to 3)
        @ReadWrite(bits: 8..<12)
        public var exti2: EXTI2

        /// EXTI x configuration (x = 0 to 3)
        @ReadWrite(bits: 4..<8)
        public var exti1: EXTI1

        /// EXTI x configuration (x = 0 to 3)
        @ReadWrite(bits: 0..<4)
        public var exti0: EXTI0
    }

    /// external interrupt configuration register 2
    @Register(bitWidth: 32)
    public struct EXTICR2 {
        /// EXTI x configuration (x = 4 to 7)
        @ReadWrite(bits: 12..<16)
        public var exti7: EXTI7

        /// EXTI x configuration (x = 4 to 7)
        @ReadWrite(bits: 8..<12)
        public var exti6: EXTI6

        /// EXTI x configuration (x = 4 to 7)
        @ReadWrite(bits: 4..<8)
        public var exti5: EXTI5

        /// EXTI x configuration (x = 4 to 7)
        @ReadWrite(bits: 0..<4)
        public var exti4: EXTI4
    }

    /// external interrupt configuration register 3
    @Register(bitWidth: 32)
    public struct EXTICR3 {
        /// EXTI x configuration (x = 8 to 11)
        @ReadWrite(bits: 12..<16)
        public var exti11: EXTI11

        /// EXTI10
        @ReadWrite(bits: 8..<12)
        public var exti10: EXTI10

        /// EXTI x configuration (x = 8 to 11)
        @ReadWrite(bits: 4..<8)
        public var exti9: EXTI9

        /// EXTI x configuration (x = 8 to 11)
        @ReadWrite(bits: 0..<4)
        public var exti8: EXTI8
    }

    /// external interrupt configuration register 4
    @Register(bitWidth: 32)
    public struct EXTICR4 {
        /// EXTI x configuration (x = 12 to 15)
        @ReadWrite(bits: 12..<16)
        public var exti15: EXTI15

        /// EXTI x configuration (x = 12 to 15)
        @ReadWrite(bits: 8..<12)
        public var exti14: EXTI14

        /// EXTI x configuration (x = 12 to 15)
        @ReadWrite(bits: 4..<8)
        public var exti13: EXTI13

        /// EXTI x configuration (x = 12 to 15)
        @ReadWrite(bits: 0..<4)
        public var exti12: EXTI12
    }

    /// Compensation cell control register
    @Register(bitWidth: 32)
    public struct CMPCR {
        /// READY
        @ReadOnly(bits: 8..<9)
        public var ready: READY

        /// Compensation cell power-down
        @ReadOnly(bits: 0..<1)
        public var cmp_pd: CMP_PD
    }
}
