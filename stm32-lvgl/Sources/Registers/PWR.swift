// Generated by svd2swift.

import MMIO

/// Power control
@RegisterBlock
public struct PWR {
    /// power control register
    @RegisterBlock(offset: 0x0)
    public var cr1: Register<CR1>

    /// power control/status register
    @RegisterBlock(offset: 0x4)
    public var csr1: Register<CSR1>

    /// power control register
    @RegisterBlock(offset: 0x8)
    public var cr2: Register<CR2>

    /// power control/status register
    @RegisterBlock(offset: 0xc)
    public var csr2: Register<CSR2>
}

extension PWR {
    /// power control register
    @Register(bitWidth: 32)
    public struct CR1 {
        /// Low-power deep sleep
        @ReadWrite(bits: 0..<1)
        public var lpds: LPDS

        /// Power down deepsleep
        @ReadWrite(bits: 1..<2, as: PDDSValues.self)
        public var pdds: PDDS

        /// Clear standby flag
        @ReadWrite(bits: 3..<4)
        public var csbf: CSBF

        /// Power voltage detector enable
        @ReadWrite(bits: 4..<5)
        public var pvde: PVDE

        /// PVD level selection
        @ReadWrite(bits: 5..<8)
        public var pls: PLS

        /// Disable backup domain write protection
        @ReadWrite(bits: 8..<9)
        public var dbp: DBP

        /// Flash power down in Stop mode
        @ReadWrite(bits: 9..<10)
        public var fpds: FPDS

        /// Low-power regulator in deepsleep under-drive mode
        @ReadWrite(bits: 10..<11)
        public var lpuds: LPUDS

        /// Main regulator in deepsleep under-drive mode
        @ReadWrite(bits: 11..<12)
        public var mruds: MRUDS

        /// ADCDC1
        @ReadWrite(bits: 13..<14)
        public var adcdc1: ADCDC1

        /// Regulator voltage scaling output selection
        @ReadWrite(bits: 14..<16, as: VOSValues.self)
        public var vos: VOS

        /// Over-drive enable
        @ReadWrite(bits: 16..<17)
        public var oden: ODEN

        /// Over-drive switching enabled
        @ReadWrite(bits: 17..<18)
        public var odswen: ODSWEN

        /// Under-drive enable in stop mode
        @ReadWrite(bits: 18..<20)
        public var uden: UDEN
    }

    /// power control/status register
    @Register(bitWidth: 32)
    public struct CSR1 {
        /// Wakeup internal flag
        @ReadOnly(bits: 0..<1)
        public var wuif: WUIF

        /// Standby flag
        @ReadOnly(bits: 1..<2)
        public var sbf: SBF

        /// PVD output
        @ReadOnly(bits: 2..<3)
        public var pvdo: PVDO

        /// Backup regulator ready
        @ReadOnly(bits: 3..<4)
        public var brr: BRR

        /// Backup regulator enable
        @ReadWrite(bits: 9..<10)
        public var bre: BRE

        /// Regulator voltage scaling output selection ready bit
        @ReadWrite(bits: 14..<15)
        public var vosrdy: VOSRDY

        /// Over-drive mode ready
        @ReadWrite(bits: 16..<17)
        public var odrdy: ODRDY

        /// Over-drive mode switching ready
        @ReadWrite(bits: 17..<18)
        public var odswrdy: ODSWRDY

        /// Under-drive ready flag
        @ReadWrite(bits: 18..<20)
        public var udrdy: UDRDY
    }

    /// power control register
    @Register(bitWidth: 32)
    public struct CR2 {
        /// Clear Wakeup Pin flag for PA0
        @ReadOnly(bits: 0..<1)
        public var cwupf1: CWUPF1

        /// Clear Wakeup Pin flag for PA2
        @ReadOnly(bits: 1..<2)
        public var cwupf2: CWUPF2

        /// Clear Wakeup Pin flag for PC1
        @ReadOnly(bits: 2..<3)
        public var cwupf3: CWUPF3

        /// Clear Wakeup Pin flag for PC13
        @ReadOnly(bits: 3..<4)
        public var cwupf4: CWUPF4

        /// Clear Wakeup Pin flag for PI8
        @ReadOnly(bits: 4..<5)
        public var cwupf5: CWUPF5

        /// Clear Wakeup Pin flag for PI11
        @ReadOnly(bits: 5..<6)
        public var cwupf6: CWUPF6

        /// Wakeup pin polarity bit for PA0
        @ReadWrite(bits: 8..<9)
        public var wupp1: WUPP1

        /// Wakeup pin polarity bit for PA2
        @ReadWrite(bits: 9..<10)
        public var wupp2: WUPP2

        /// Wakeup pin polarity bit for PC1
        @ReadWrite(bits: 10..<11)
        public var wupp3: WUPP3

        /// Wakeup pin polarity bit for PC13
        @ReadWrite(bits: 11..<12)
        public var wupp4: WUPP4

        /// Wakeup pin polarity bit for PI8
        @ReadWrite(bits: 12..<13)
        public var wupp5: WUPP5

        /// Wakeup pin polarity bit for PI11
        @ReadWrite(bits: 13..<14)
        public var wupp6: WUPP6
    }

    /// power control/status register
    @Register(bitWidth: 32)
    public struct CSR2 {
        /// Wakeup Pin flag for PA0
        @ReadOnly(bits: 0..<1)
        public var wupf1: WUPF1

        /// Wakeup Pin flag for PA2
        @ReadOnly(bits: 1..<2)
        public var wupf2: WUPF2

        /// Wakeup Pin flag for PC1
        @ReadOnly(bits: 2..<3)
        public var wupf3: WUPF3

        /// Wakeup Pin flag for PC13
        @ReadOnly(bits: 3..<4)
        public var wupf4: WUPF4

        /// Wakeup Pin flag for PI8
        @ReadOnly(bits: 4..<5)
        public var wupf5: WUPF5

        /// Wakeup Pin flag for PI11
        @ReadOnly(bits: 5..<6)
        public var wupf6: WUPF6

        /// Enable Wakeup pin for PA0
        @ReadWrite(bits: 8..<9)
        public var ewup1: EWUP1

        /// Enable Wakeup pin for PA2
        @ReadWrite(bits: 9..<10)
        public var ewup2: EWUP2

        /// Enable Wakeup pin for PC1
        @ReadWrite(bits: 10..<11)
        public var ewup3: EWUP3

        /// Enable Wakeup pin for PC13
        @ReadWrite(bits: 11..<12)
        public var ewup4: EWUP4

        /// Enable Wakeup pin for PI8
        @ReadWrite(bits: 12..<13)
        public var ewup5: EWUP5

        /// Enable Wakeup pin for PI11
        @ReadWrite(bits: 13..<14)
        public var ewup6: EWUP6
    }
}

extension PWR.CR1 {
    public struct PDDSValues: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Enter Stop mode when the CPU enters deepsleep
        public static let STOP_MODE = Self(rawValue: 0x0)

        /// Enter Standby mode when the CPU enters deepsleep
        public static let STANDBY_MODE = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension PWR.CR1 {
    public struct VOSValues: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 2

        /// Scale 3 mode
        public static let SCALE3 = Self(rawValue: 0x1)

        /// Scale 2 mode
        public static let SCALE2 = Self(rawValue: 0x2)

        /// Scale 1 mode (reset value)
        public static let SCALE1 = Self(rawValue: 0x3)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}
