// Generated by svd2swift.

import MMIO

/// Debug support
@RegisterBlock
public struct DBGMCU {
    /// IDCODE
    @RegisterBlock(offset: 0x0)
    public var idcode: Register<IDCODE>

    /// Control Register
    @RegisterBlock(offset: 0x4)
    public var cr: Register<CR>

    /// Debug MCU APB1 Freeze registe
    @RegisterBlock(offset: 0x8)
    public var apb1_fz: Register<APB1_FZ>

    /// Debug MCU APB2 Freeze registe
    @RegisterBlock(offset: 0xc)
    public var apb2_fz: Register<APB2_FZ>
}

extension DBGMCU {
    /// IDCODE
    @Register(bitWidth: 32)
    public struct IDCODE {
        /// DEV_ID
        @ReadOnly(bits: 0..<12)
        public var dev_id: DEV_ID

        /// REV_ID
        @ReadOnly(bits: 16..<32)
        public var rev_id: REV_ID
    }

    /// Control Register
    @Register(bitWidth: 32)
    public struct CR {
        /// DBG_SLEEP
        @ReadWrite(bits: 0..<1)
        public var dbg_sleep: DBG_SLEEP

        /// DBG_STOP
        @ReadWrite(bits: 1..<2)
        public var dbg_stop: DBG_STOP

        /// DBG_STANDBY
        @ReadWrite(bits: 2..<3)
        public var dbg_standby: DBG_STANDBY

        /// TRACE_IOEN
        @ReadWrite(bits: 5..<6)
        public var trace_ioen: TRACE_IOEN

        /// TRACE_MODE
        @ReadWrite(bits: 6..<8)
        public var trace_mode: TRACE_MODE
    }

    /// Debug MCU APB1 Freeze registe
    @Register(bitWidth: 32)
    public struct APB1_FZ {
        /// DBG_TIM2_STOP
        @ReadWrite(bits: 0..<1)
        public var dbg_tim2_stop: DBG_TIM2_STOP

        /// DBG_TIM3 _STOP
        @ReadWrite(bits: 1..<2)
        public var dbg_tim3_stop: DBG_TIM3_STOP

        /// DBG_TIM4_STOP
        @ReadWrite(bits: 2..<3)
        public var dbg_tim4_stop: DBG_TIM4_STOP

        /// DBG_TIM5_STOP
        @ReadWrite(bits: 3..<4)
        public var dbg_tim5_stop: DBG_TIM5_STOP

        /// DBG_TIM6_STOP
        @ReadWrite(bits: 4..<5)
        public var dbg_tim6_stop: DBG_TIM6_STOP

        /// DBG_TIM7_STOP
        @ReadWrite(bits: 5..<6)
        public var dbg_tim7_stop: DBG_TIM7_STOP

        /// DBG_TIM12_STOP
        @ReadWrite(bits: 6..<7)
        public var dbg_tim12_stop: DBG_TIM12_STOP

        /// DBG_TIM13_STOP
        @ReadWrite(bits: 7..<8)
        public var dbg_tim13_stop: DBG_TIM13_STOP

        /// DBG_TIM14_STOP
        @ReadWrite(bits: 8..<9)
        public var dbg_tim14_stop: DBG_TIM14_STOP

        /// DBG_WWDG_STOP
        @ReadWrite(bits: 11..<12)
        public var dbg_wwdg_stop: DBG_WWDG_STOP

        /// DBG_IWDEG_STOP
        @ReadWrite(bits: 12..<13)
        public var dbg_iwdg_stop: DBG_IWDG_STOP

        /// DBG_J2C1_SMBUS_TIMEOUT
        @ReadWrite(bits: 21..<22)
        public var dbg_j2c1_smbus_timeout: DBG_J2C1_SMBUS_TIMEOUT

        /// DBG_J2C2_SMBUS_TIMEOUT
        @ReadWrite(bits: 22..<23)
        public var dbg_j2c2_smbus_timeout: DBG_J2C2_SMBUS_TIMEOUT

        /// DBG_J2C3SMBUS_TIMEOUT
        @ReadWrite(bits: 23..<24)
        public var dbg_j2c3smbus_timeout: DBG_J2C3SMBUS_TIMEOUT

        /// DBG_CAN1_STOP
        @ReadWrite(bits: 25..<26)
        public var dbg_can1_stop: DBG_CAN1_STOP

        /// DBG_CAN2_STOP
        @ReadWrite(bits: 26..<27)
        public var dbg_can2_stop: DBG_CAN2_STOP
    }

    /// Debug MCU APB2 Freeze registe
    @Register(bitWidth: 32)
    public struct APB2_FZ {
        /// TIM1 counter stopped when core is halted
        @ReadWrite(bits: 0..<1)
        public var dbg_tim1_stop: DBG_TIM1_STOP

        /// TIM8 counter stopped when core is halted
        @ReadWrite(bits: 1..<2)
        public var dbg_tim8_stop: DBG_TIM8_STOP

        /// TIM9 counter stopped when core is halted
        @ReadWrite(bits: 16..<17)
        public var dbg_tim9_stop: DBG_TIM9_STOP

        /// TIM10 counter stopped when core is halted
        @ReadWrite(bits: 17..<18)
        public var dbg_tim10_stop: DBG_TIM10_STOP

        /// TIM11 counter stopped when core is halted
        @ReadWrite(bits: 18..<19)
        public var dbg_tim11_stop: DBG_TIM11_STOP
    }
}
