// Generated by svd2swift.

import MMIO

/// SysTick timer
@RegisterBlock
public struct STK {
    /// SysTick control and status register
    @RegisterBlock(offset: 0x0)
    public var csr: Register<CSR>

    /// SysTick reload value register
    @RegisterBlock(offset: 0x4)
    public var rvr: Register<RVR>

    /// SysTick current value register
    @RegisterBlock(offset: 0x8)
    public var cvr: Register<CVR>

    /// SysTick calibration value register
    @RegisterBlock(offset: 0xc)
    public var calib: Register<CALIB>
}

extension STK {
    /// SysTick control and status register
    @Register(bitWidth: 32)
    public struct CSR {
        /// Counter enable
        @ReadWrite(bits: 0..<1)
        public var enable: ENABLE

        /// SysTick exception request enable
        @ReadWrite(bits: 1..<2)
        public var tickint: TICKINT

        /// Clock source selection
        @ReadWrite(bits: 2..<3)
        public var clksource: CLKSOURCE

        /// COUNTFLAG
        @ReadWrite(bits: 16..<17)
        public var countflag: COUNTFLAG
    }

    /// SysTick reload value register
    @Register(bitWidth: 32)
    public struct RVR {
        /// RELOAD value
        @ReadWrite(bits: 0..<24)
        public var reload: RELOAD
    }

    /// SysTick current value register
    @Register(bitWidth: 32)
    public struct CVR {
        /// Current counter value
        @ReadWrite(bits: 0..<24)
        public var current: CURRENT
    }

    /// SysTick calibration value register
    @Register(bitWidth: 32)
    public struct CALIB {
        /// Calibration value
        @ReadWrite(bits: 0..<24)
        public var tenms: TENMS

        /// SKEW flag: Indicates whether the TENMS value is exact
        @ReadWrite(bits: 30..<31)
        public var skew: SKEW

        /// NOREF flag. Reads as zero
        @ReadWrite(bits: 31..<32)
        public var noref: NOREF
    }
}
