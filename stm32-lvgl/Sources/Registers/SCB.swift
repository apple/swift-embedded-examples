// Generated by svd2swift.

import MMIO

/// System control block
@RegisterBlock
public struct SCB {
    /// CPUID base register
    @RegisterBlock(offset: 0x0)
    public var cpuid: Register<CPUID>

    /// Interrupt control and state register
    @RegisterBlock(offset: 0x4)
    public var icsr: Register<ICSR>

    /// Vector table offset register
    @RegisterBlock(offset: 0x8)
    public var vtor: Register<VTOR>

    /// Application interrupt and reset control register
    @RegisterBlock(offset: 0xc)
    public var aircr: Register<AIRCR>

    /// System control register
    @RegisterBlock(offset: 0x10)
    public var scr: Register<SCR>

    /// Configuration and control register
    @RegisterBlock(offset: 0x14)
    public var ccr: Register<CCR>

    /// System handler priority registers
    @RegisterBlock(offset: 0x18)
    public var shpr1: Register<SHPR1>

    /// System handler priority registers
    @RegisterBlock(offset: 0x1c)
    public var shpr2: Register<SHPR2>

    /// System handler priority registers
    @RegisterBlock(offset: 0x20)
    public var shpr3: Register<SHPR3>

    /// System handler control and state register
    @RegisterBlock(offset: 0x24)
    public var shcrs: Register<SHCRS>

    /// Configurable fault status register
    @RegisterBlock(offset: 0x28)
    public var cfsr_ufsr_bfsr_mmfsr: Register<CFSR_UFSR_BFSR_MMFSR>

    /// Hard fault status register
    @RegisterBlock(offset: 0x2c)
    public var hfsr: Register<HFSR>

    /// Memory management fault address register
    @RegisterBlock(offset: 0x34)
    public var mmfar: Register<MMFAR>

    /// Bus fault address register
    @RegisterBlock(offset: 0x38)
    public var bfar: Register<BFAR>
}

extension SCB {
    /// CPUID base register
    @Register(bitWidth: 32)
    public struct CPUID {
        /// Revision number
        @ReadOnly(bits: 0..<4)
        public var revision: Revision

        /// Part number of the processor
        @ReadOnly(bits: 4..<16)
        public var partno: PartNo

        /// Reads as 0xF
        @ReadOnly(bits: 16..<20)
        public var constant: Constant

        /// Variant number
        @ReadOnly(bits: 20..<24)
        public var variant: Variant

        /// Implementer code
        @ReadOnly(bits: 24..<32)
        public var implementer: Implementer
    }

    /// Interrupt control and state register
    @Register(bitWidth: 32)
    public struct ICSR {
        /// Active vector
        @ReadWrite(bits: 0..<9)
        public var vectactive: VECTACTIVE

        /// Return to base level
        @ReadWrite(bits: 11..<12)
        public var rettobase: RETTOBASE

        /// Pending vector
        @ReadWrite(bits: 12..<19)
        public var vectpending: VECTPENDING

        /// Interrupt pending flag
        @ReadWrite(bits: 22..<23)
        public var isrpending: ISRPENDING

        /// SysTick exception clear-pending bit
        @ReadWrite(bits: 25..<26)
        public var pendstclr: PENDSTCLR

        /// SysTick exception set-pending bit
        @ReadWrite(bits: 26..<27)
        public var pendstset: PENDSTSET

        /// PendSV clear-pending bit
        @ReadWrite(bits: 27..<28)
        public var pendsvclr: PENDSVCLR

        /// PendSV set-pending bit
        @ReadWrite(bits: 28..<29)
        public var pendsvset: PENDSVSET

        /// NMI set-pending bit.
        @ReadWrite(bits: 31..<32)
        public var nmipendset: NMIPENDSET
    }

    /// Vector table offset register
    @Register(bitWidth: 32)
    public struct VTOR {
        /// Vector table base offset field
        @ReadWrite(bits: 9..<30)
        public var tbloff: TBLOFF
    }

    /// Application interrupt and reset control register
    @Register(bitWidth: 32)
    public struct AIRCR {
        /// VECTRESET
        @ReadWrite(bits: 0..<1)
        public var vectreset: VECTRESET

        /// VECTCLRACTIVE
        @ReadWrite(bits: 1..<2)
        public var vectclractive: VECTCLRACTIVE

        /// SYSRESETREQ
        @ReadWrite(bits: 2..<3)
        public var sysresetreq: SYSRESETREQ

        /// PRIGROUP
        @ReadWrite(bits: 8..<11)
        public var prigroup: PRIGROUP

        /// ENDIANESS
        @ReadWrite(bits: 15..<16)
        public var endianess: ENDIANESS

        /// Register key
        @ReadWrite(bits: 16..<32)
        public var vectkeystat: VECTKEYSTAT
    }

    /// System control register
    @Register(bitWidth: 32)
    public struct SCR {
        /// SLEEPONEXIT
        @ReadWrite(bits: 1..<2)
        public var sleeponexit: SLEEPONEXIT

        /// SLEEPDEEP
        @ReadWrite(bits: 2..<3)
        public var sleepdeep: SLEEPDEEP

        /// Send Event on Pending bit
        @ReadWrite(bits: 4..<5)
        public var seveonpend: SEVEONPEND
    }

    /// Configuration and control register
    @Register(bitWidth: 32)
    public struct CCR {
        /// Configures how the processor enters Thread mode
        @ReadWrite(bits: 0..<1)
        public var nonbasethrdena: NONBASETHRDENA

        /// USERSETMPEND
        @ReadWrite(bits: 1..<2)
        public var usersetmpend: USERSETMPEND

        /// UNALIGN_ TRP
        @ReadWrite(bits: 3..<4)
        public var unalign__trp: UNALIGN__TRP

        /// DIV_0_TRP
        @ReadWrite(bits: 4..<5)
        public var div_0_trp: DIV_0_TRP

        /// BFHFNMIGN
        @ReadWrite(bits: 8..<9)
        public var bfhfnmign: BFHFNMIGN

        /// STKALIGN
        @ReadWrite(bits: 9..<10)
        public var stkalign: STKALIGN

        /// DC
        @ReadWrite(bits: 16..<17)
        public var dc: DC

        /// IC
        @ReadWrite(bits: 17..<18)
        public var ic: IC

        /// BP
        @ReadWrite(bits: 18..<19)
        public var bp: BP
    }

    /// System handler priority registers
    @Register(bitWidth: 32)
    public struct SHPR1 {
        /// Priority of system handler 4
        @ReadWrite(bits: 0..<8)
        public var pri_4: PRI_4

        /// Priority of system handler 5
        @ReadWrite(bits: 8..<16)
        public var pri_5: PRI_5

        /// Priority of system handler 6
        @ReadWrite(bits: 16..<24)
        public var pri_6: PRI_6
    }

    /// System handler priority registers
    @Register(bitWidth: 32)
    public struct SHPR2 {
        /// Priority of system handler 11
        @ReadWrite(bits: 24..<32)
        public var pri_11: PRI_11
    }

    /// System handler priority registers
    @Register(bitWidth: 32)
    public struct SHPR3 {
        /// Priority of system handler 14
        @ReadWrite(bits: 16..<24)
        public var pri_14: PRI_14

        /// Priority of system handler 15
        @ReadWrite(bits: 24..<32)
        public var pri_15: PRI_15
    }

    /// System handler control and state register
    @Register(bitWidth: 32)
    public struct SHCRS {
        /// Memory management fault exception active bit
        @ReadWrite(bits: 0..<1)
        public var memfaultact: MEMFAULTACT

        /// Bus fault exception active bit
        @ReadWrite(bits: 1..<2)
        public var busfaultact: BUSFAULTACT

        /// Usage fault exception active bit
        @ReadWrite(bits: 3..<4)
        public var usgfaultact: USGFAULTACT

        /// SVC call active bit
        @ReadWrite(bits: 7..<8)
        public var svcallact: SVCALLACT

        /// Debug monitor active bit
        @ReadWrite(bits: 8..<9)
        public var monitoract: MONITORACT

        /// PendSV exception active bit
        @ReadWrite(bits: 10..<11)
        public var pendsvact: PENDSVACT

        /// SysTick exception active bit
        @ReadWrite(bits: 11..<12)
        public var systickact: SYSTICKACT

        /// Usage fault exception pending bit
        @ReadWrite(bits: 12..<13)
        public var usgfaultpended: USGFAULTPENDED

        /// Memory management fault exception pending bit
        @ReadWrite(bits: 13..<14)
        public var memfaultpended: MEMFAULTPENDED

        /// Bus fault exception pending bit
        @ReadWrite(bits: 14..<15)
        public var busfaultpended: BUSFAULTPENDED

        /// SVC call pending bit
        @ReadWrite(bits: 15..<16)
        public var svcallpended: SVCALLPENDED

        /// Memory management fault enable bit
        @ReadWrite(bits: 16..<17)
        public var memfaultena: MEMFAULTENA

        /// Bus fault enable bit
        @ReadWrite(bits: 17..<18)
        public var busfaultena: BUSFAULTENA

        /// Usage fault enable bit
        @ReadWrite(bits: 18..<19)
        public var usgfaultena: USGFAULTENA
    }

    /// Configurable fault status register
    @Register(bitWidth: 32)
    public struct CFSR_UFSR_BFSR_MMFSR {
        /// IACCVIOL
        @ReadWrite(bits: 0..<1)
        public var iaccviol: IACCVIOL

        /// DACCVIOL
        @ReadWrite(bits: 1..<2)
        public var daccviol: DACCVIOL

        /// MUNSTKERR
        @ReadWrite(bits: 3..<4)
        public var munstkerr: MUNSTKERR

        /// MSTKERR
        @ReadWrite(bits: 4..<5)
        public var mstkerr: MSTKERR

        /// MLSPERR
        @ReadWrite(bits: 5..<6)
        public var mlsperr: MLSPERR

        /// MMARVALID
        @ReadWrite(bits: 7..<8)
        public var mmarvalid: MMARVALID

        /// Instruction bus error
        @ReadWrite(bits: 8..<9)
        public var ibuserr: IBUSERR

        /// Precise data bus error
        @ReadWrite(bits: 9..<10)
        public var preciserr: PRECISERR

        /// Imprecise data bus error
        @ReadWrite(bits: 10..<11)
        public var impreciserr: IMPRECISERR

        /// Bus fault on unstacking for a return from exception
        @ReadWrite(bits: 11..<12)
        public var unstkerr: UNSTKERR

        /// Bus fault on stacking for exception entry
        @ReadWrite(bits: 12..<13)
        public var stkerr: STKERR

        /// Bus fault on floating-point lazy state preservation
        @ReadWrite(bits: 13..<14)
        public var lsperr: LSPERR

        /// Bus Fault Address Register (BFAR) valid flag
        @ReadWrite(bits: 15..<16)
        public var bfarvalid: BFARVALID

        /// Undefined instruction usage fault
        @ReadWrite(bits: 16..<17)
        public var undefinstr: UNDEFINSTR

        /// Invalid state usage fault
        @ReadWrite(bits: 17..<18)
        public var invstate: INVSTATE

        /// Invalid PC load usage fault
        @ReadWrite(bits: 18..<19)
        public var invpc: INVPC

        /// No coprocessor usage fault.
        @ReadWrite(bits: 19..<20)
        public var nocp: NOCP

        /// Unaligned access usage fault
        @ReadWrite(bits: 24..<25)
        public var unaligned: UNALIGNED

        /// Divide by zero usage fault
        @ReadWrite(bits: 25..<26)
        public var divbyzero: DIVBYZERO
    }

    /// Hard fault status register
    @Register(bitWidth: 32)
    public struct HFSR {
        /// Vector table hard fault
        @ReadWrite(bits: 1..<2)
        public var vecttbl: VECTTBL

        /// Forced hard fault
        @ReadWrite(bits: 30..<31)
        public var forced: FORCED

        /// Reserved for Debug use
        @ReadWrite(bits: 31..<32)
        public var debug_vt: DEBUG_VT
    }

    /// Memory management fault address register
    @Register(bitWidth: 32)
    public struct MMFAR {
        /// Memory management fault address
        @ReadWrite(bits: 0..<32)
        public var address: ADDRESS
    }

    /// Bus fault address register
    @Register(bitWidth: 32)
    public struct BFAR {
        /// Bus fault address
        @ReadWrite(bits: 0..<32)
        public var address: ADDRESS
    }
}
